<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming Tales | Moirae]]></title>
  <link href="http://MoiraeSoftware.github.io/blog/categories/programming-tales/atom.xml" rel="self"/>
  <link href="http://MoiraeSoftware.github.io/"/>
  <updated>2013-08-18T22:46:30+01:00</updated>
  <id>http://MoiraeSoftware.github.io/</id>
  <author>
    <name><![CDATA[Dave Thomas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Lurking Horror]]></title>
    <link href="http://MoiraeSoftware.github.io/blog/2012/07/15/the-lurking-horror/"/>
    <updated>2012-07-15T20:13:00+01:00</updated>
    <id>http://MoiraeSoftware.github.io/blog/2012/07/15/the-lurking-horror</id>
    <content type="html"><![CDATA[<blockquote><p>Deep in the darkest depths lurks an ancient horror, when the time is right it will rise forth and leave you screaming for mercy and begging for forgiveness&hellip;</p></blockquote>

<p>OK, I have a penchant for being over dramatic but in this post I am going to reveal some little known caveats in a well known and much revelled area of F#, agents aka the <a href="http://msdn.microsoft.com/en-us/library/ee370357" title="Control.MailboxProcessor&lt;'Msg&gt;"><code>MailboxProcessor</code></a>. Gasp!</p>

<p>First let me give you a demonstration:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Diagnostics</span>
</span><span class='line'><span class="k">type</span> <span class="k">internal</span> <span class="nc">BadAgentMessage</span> <span class="o">=</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Message</span> <span class="k">of</span> <span class="kt">string</span> <span class="o">*</span> <span class="kt">int</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Lock</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Unlock</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">type</span> <span class="nc">BadAgent</span><span class="bp">()</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">let</span> <span class="n">agent</span> <span class="o">=</span> <span class="nn">MailboxProcessor</span><span class="p">.</span><span class="nc">Start</span><span class="o">(</span><span class="k">fun</span> <span class="n">agent</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="o">;&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">let</span> <span class="n">sw</span> <span class="o">=</span> <span class="nc">Stopwatch</span><span class="bp">()</span>
</span><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">waiting</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">agent</span><span class="o">.</span><span class="nc">Scan</span><span class="o">(</span><span class="k">function</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Unlock</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">Some</span><span class="o">(</span><span class="n">working</span> <span class="bp">()</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">None</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">and</span> <span class="n">working</span><span class="bp">()</span> <span class="o">=</span> <span class="n">async</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">let</span><span class="o">!</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">agent</span><span class="o">.</span><span class="nc">Receive</span><span class="bp">()</span>
</span><span class='line'>  <span class="k">match</span> <span class="n">msg</span> <span class="k">with</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Lock</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>   <span class="k">return</span><span class="o">!</span> <span class="n">waiting</span><span class="bp">()</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Unlock</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="k">return</span><span class="o">!</span> <span class="n">working</span><span class="bp">()</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Message</span> <span class="o">(</span><span class="n">msg</span><span class="o">,</span> <span class="n">iter</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">iter</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">then</span> <span class="n">sw</span><span class="o">.</span><span class="nc">Start</span><span class="bp">()</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">iter</span> <span class="o">%</span> <span class="mi">10000</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">then</span> <span class="n">sw</span><span class="o">.</span><span class="nc">Stop</span><span class="bp">()</span>
</span><span class='line'>             <span class="n">printfn</span> <span class="s2">&quot;%s : %i in: %fms&quot;</span> <span class="n">msg</span> <span class="n">iter</span> <span class="n">sw</span><span class="o">.</span><span class="nn">Elapsed</span><span class="p">.</span><span class="nc">TotalMilliseconds</span>
</span><span class='line'>             <span class="n">sw</span><span class="o">.</span><span class="nc">Restart</span><span class="bp">()</span>
</span><span class='line'>      <span class="k">return</span><span class="o">!</span> <span class="n">working</span><span class="bp">()</span> <span class="o">}</span>
</span><span class='line'><span class="n">working</span><span class="bp">()</span><span class="o">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Msg</span><span class="o">(</span><span class="n">msg</span><span class="o">)</span> <span class="o">=</span> <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span><span class="o">(</span><span class="nc">Message</span> <span class="n">msg</span><span class="o">)</span>
</span><span class='line'>  <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Lock</span><span class="bp">()</span> <span class="o">=</span> <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span><span class="o">(</span><span class="nc">Lock</span><span class="o">)</span>
</span><span class='line'>  <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Unlock</span><span class="bp">()</span> <span class="o">=</span> <span class="n">agent</span><span class="o">.</span><span class="nc">Post</span><span class="o">(</span><span class="nc">Unlock</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>BadAgentMessage</code> type defines a discriminated union that we are going to use for the agents message interface.  This is comprised of three elements:</p>

<ul>
<li><strong>Message:</strong>  This will just be a simple <code>string</code>-based message and an <code>int</code> used as a counter.</li>
<li><strong>Lock:</strong>  This is used to stop message processing within the agent by causing it to wait for an <code>Unlock</code> message to arrive.</li>
<li><strong>Unlock:</strong>  This message is used to resume the processing within the agent, effectively exiting the locked state.</li>
</ul>


<p>We have two main sections to the agents body which I will describe below.</p>

<h3>working</h3>

<p>The purpose of the <code>working</code> function is to dequeue the messages from the agent and process them with pattern matching; <code>let! msg = agent.Receive()</code> is used to get the next message which is then pattern matched to be one of the three messages types of the <code>BadAgentMessage</code>.  When the <code>Lock</code> message is encountered <code>return! waiting()</code> is used to place the agent in a state where it is waiting for an <code>Unlock</code> message to arrive.  An <code>Unlock</code> message simply resumes processing by calling <code>return! working()</code>.  The only real purpose of the <code>Unlock</code> message is to exit from the locked state that is introduced by the <code>Lock</code> message.  The <code>Message</code> message simply starts a <a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.stopwatch.aspx" title="StopWatch"><code>StopWatch</code></a> on the first operation by using the Messages counter, and then stops it again on the 10,000th operation.  At this point the time taken is also printed to the console and the <code>StopWatch</code> is restarted before resuming the main processing loop by calling <code>return! working()</code></p>

<h3>waiting</h3>

<p>This function is using the agents <a href="http://msdn.microsoft.com/en-us/library/ee370554.aspx" title="MailboxProcessor.Scan"><code>Scan</code></a> function to wait for an <code>Unlock</code> message to arrive, once it does it puts the agent back into normal operation by calling returning <code>Some(working())</code> from the <code>Scan</code>function.  If the message does not match an <code>Unlock</code> message then <code>None</code> is returned and the agent simply waits for the next message before trying again.</p>

<p>The rest of the agent is just ancillary member functions to allow easy sending of the three message types.</p>

<h3>Test Harness</h3>

<p>And here&rsquo;s a very simple test harness:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">ba</span> <span class="o">=</span> <span class="nc">BadAgent</span><span class="bp">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">printfn</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Press</span> <span class="k">and</span> <span class="n">key</span> <span class="k">to</span> <span class="n">start</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span>
</span><span class='line'><span class="nn">Console</span><span class="p">.</span><span class="nc">ReadLine</span><span class="bp">()</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</span><span class='line'><span class="k">let</span> <span class="n">dump</span> <span class="n">number</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="o">..</span> <span class="n">number</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">ba</span><span class="o">.</span><span class="nc">Msg</span><span class="o">(</span><span class="s2">&quot;A message&quot;</span><span class="o">,</span> <span class="n">i</span><span class="o">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">ta</span><span class="o">.</span><span class="nc">Lock</span><span class="bp">()</span>
</span><span class='line'><span class="n">dump</span> <span class="mi">200000</span>
</span><span class='line'><span class="n">ta</span><span class="o">.</span><span class="nc">Unlock</span><span class="bp">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nn">Console</span><span class="p">.</span><span class="nc">ReadLine</span><span class="bp">()</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>OK, so this is a very synthetic test but I just wanted to highlight some of the internal behaviour.  If I run this code I get the following console output:</p>

<p><img class="<a" src="href="https://lh5.googleusercontent.com/-chMoEOya7CE/T_tRraiW_eI/AAAAAAAABbY/wsQkWbm4DJM/s677/ConsoleTimes.png">https://lh5.googleusercontent.com/-chMoEOya7CE/T_tRraiW_eI/AAAAAAAABbY/wsQkWbm4DJM/s677/ConsoleTimes.png</a>"></p>

<p>You can see that the time to process the first 10,000 messages is 3083ms then it steadily decreases until the last 10,000 messages are processed in 94ms.  The processing time for 10,000 messages is about 33 times slower at the beginning than as it is at the end.  Why?</p>

<h2>Opening it up</h2>

<p>Let&rsquo;s take a look at some of the internals of the <code>MailboxProcessor</code> to understand what&rsquo;s going on.  First of all the core functionality is actually contained within the <code>Mailbox</code> type with the <code>MailboxProcessor</code> acting as an augmenter.  <code>TryPostAndReply</code>, <code>PostAndReply</code>, <code>PostAndTryAsyncReply</code>, and <code>PostAndAsyncReply</code> all add a single functionality to the <code>Mailbox</code> type; the ability to synchronously or asynchronously reply to a message once it arrives.  <code>TryPostAndReply</code> and <code>PostAndReply</code> both wait synchronously for a message to arrive before replying, whereas <code>PostAndTryAsyncReply</code> and <code>PostAndAsyncReply</code> both reply asynchronously.  This functionality is achieved with the use of the <code>ResultCell</code> and <code>AsyncReplyChannel</code> types.  For an in-depth discussion on this you might want to refer to my earlier series which describes implementing the <code>MailboxProcessor</code> with <a href="http://msdn.microsoft.com/en-us/devlabs/gg585582.aspx" title="TPL Dataflow">TPL Dataflow</a> (see <a href="/blog/2012/01/22/FSharp-Dataflow-agents-I/" title="FSharp Dataflow agents - Part 1">Part 1</a>, <a href="/blog/2012/01/30/FSharp-Dataflow-agents-II/" title="FSharp Dataflow agents - Part 2">Part 2</a> and <a href="/blog/2012/02/20/fsharp-dataflow-agents-III/" title="FSharp Dataflow agents - Part 3">Part 3</a>).</p>

<p>Below are some snippets of code from the <code>Mailbox</code> type you might want to take a peek yourself at the <a href="https://github.com/fsharp/fsharp/blob/master/src/fsharp/FSharp.Core/control.fs#L1854" title="Mailbox code">FSharp repository</a> over at <a href="https://github.com/">Github</a> for a closer inspection, be warned thought there is a lot of code in there!</p>

<p>Here&rsquo;s the initial type definition for the <code>Mailbox</code>, you can see that  there are two mutable fields:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Mailbox</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="nc">Msg</span><span class="o">&gt;</span><span class="bp">()</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">let</span> <span class="k">mutable</span> <span class="n">inboxStore</span>  <span class="o">=</span> <span class="k">null</span>
</span><span class='line'><span class="k">let</span> <span class="k">mutable</span> <span class="n">arrivals</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Queue</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="k">&#39;</span><span class="nc">Msg</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span><span class="bp">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>inboxStore</code> is a generic List type <code>System.Collection.Generic.List&lt;T&gt;</code> and <code>arrivals</code> is a <code>System.Collections.Generic.Queue&lt;T&gt;</code> type.</p>

<p>For now the <code>inboxStore</code> is null and is only ever assigned via <code>Scan</code> or <code>TryScan</code> and this is done indirectly via the <code>inbox</code> member shown here:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>inbox </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="n">inbox</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">match</span> <span class="n">inboxStore</span> <span class="k">with</span>
</span><span class='line'><span class="o">|</span> <span class="k">null</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">inboxStore</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;-</span> <span class="k">new</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Collections</span><span class="p">.</span><span class="nn">Generic</span><span class="p">.</span><span class="nc">List</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="k">&#39;</span><span class="nc">Msg</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;(</span><span class="mi">1</span><span class="o">)</span> <span class="c1">// ResizeArray</span>
</span><span class='line'><span class="o">|</span> <span class="o">_</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="bp">()</span>
</span><span class='line'><span class="n">inboxStore</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Understanding the code in the <code>Mailbox</code> can be difficult given the amount of code, so I&rsquo;ll highlight the key functions in the sections below to make it a little easier.</p>

<h3>Scan / TryScan</h3>

<p><code>Scan</code> is just an async wrapper around <code>TryScan</code>. If <code>TryScan</code> returns None an exception is raised, if not then the result from <code>TryScan</code> is returned.</p>

<p>So now lets take a look at the source of <code>TryScan</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>TryScan </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">TryScan</span> <span class="o">((</span><span class="n">f</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="nc">Msg</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="o">;&gt;</span> <span class="o">(</span><span class="nc">Async</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">rsquo</span><span class="o">;</span><span class="nc">T</span><span class="o">&gt;)</span> <span class="n">option</span><span class="o">),</span> <span class="n">timeout</span><span class="o">)</span> <span class="o">:</span> <span class="nc">Async</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">rsquo</span><span class="o">;</span><span class="nc">T</span> <span class="n">option</span><span class="o">&gt;</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">let</span> <span class="k">rec</span> <span class="n">scan</span><span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">async</span> <span class="o">{</span> <span class="k">match</span> <span class="n">x</span><span class="o">.</span><span class="n">scanArrivals</span><span class="o">(</span><span class="n">f</span><span class="o">)</span> <span class="k">with</span>
</span><span class='line'>            <span class="o">|</span> <span class="nc">None</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="c1">// Deschedule and wait for a message. When it comes, rescan the arrivals</span>
</span><span class='line'>                      <span class="k">let</span><span class="o">!</span> <span class="n">ok</span> <span class="o">=</span> <span class="n">waitOne</span><span class="o">(</span><span class="n">timeout</span><span class="o">)</span>
</span><span class='line'>                      <span class="k">if</span> <span class="n">ok</span> <span class="k">then</span> <span class="k">return</span><span class="o">!</span> <span class="n">scan</span><span class="bp">()</span> <span class="k">else</span> <span class="k">return</span> <span class="nc">None</span>
</span><span class='line'>            <span class="o">|</span> <span class="nc">Some</span> <span class="n">resP</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="k">let</span><span class="o">!</span> <span class="n">res</span> <span class="o">=</span> <span class="n">resP</span>
</span><span class='line'>                           <span class="k">return</span> <span class="nc">Some</span><span class="o">(</span><span class="n">res</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="c1">// Look in the inbox first</span>
</span><span class='line'><span class="n">async</span> <span class="o">{</span> <span class="k">match</span> <span class="n">x</span><span class="o">.</span><span class="n">scanInbox</span><span class="o">(</span><span class="n">f</span><span class="o">,</span><span class="mi">0</span><span class="o">)</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">None</span>  <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="k">return</span><span class="o">!</span> <span class="n">scan</span><span class="bp">()</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Some</span> <span class="n">resP</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="k">let</span><span class="o">!</span> <span class="n">res</span> <span class="o">=</span> <span class="n">resP</span>
</span><span class='line'>                       <span class="k">return</span> <span class="nc">Some</span><span class="o">(</span><span class="n">res</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You can see here that an <a href="http://msdn.microsoft.com/en-us/library/dd233250.aspx" title="async workflows">async workflow</a> is declared that first pattern matches on <code>x.scanInbox</code>, passing in the predicate scan function <code>f</code> and the literal <code>0</code>.  If <code>None</code> is returned then there is no match and the recursive function <code>scan</code> is returned.  This time the function <code>x.scanArrivals</code> is be called, again passing in the predicate function <code>f</code>.</p>

<ul>
<li>An interesting point to note, is that each message that arrives that doesn&rsquo;t match the predicate <code>f</code> resets the  timer: <code>let! ok = waitOne(timeout)</code>, this means that any number of trivial messages that arrive keep the <code>TryScan</code> function running.  This was also mentioned by Jon Harrop in a Stackoverflow question entitled <a href="http://stackoverflow.com/a/4891920/607275" title="How to use TryScan in F# properly">How to use TryScan in F# properly</a>.  Jon also mentions locking which I will address in the <code>scanArrivals</code> section below.</li>
</ul>


<p>So what&rsquo;s the difference between <code>scanArrivals</code> and <code>scanInbox</code>?</p>

<p><code>scanInbox</code> operates on the <code>inboxStore</code> which you might recall is a <code>List&lt;T&gt;</code> type, whereas <code>scanArrivals</code> operates on <code>arrivals</code> which is a <code>Queue&lt;T&gt;</code> type.  The big difference between these two is that as messages first arrive in the Mailbox they end up in the arrivals queue first, and when messages are not matched by the predicate function <code>f</code> they are added to the <code>inboxStore</code>, hence the need to always check the <code>inboxStore</code> before the <code>arrivals</code> queue otherwise previously unmatched scan messages would not be processed correctly.  You might be asking yourself why not use a <code>Queue&lt;T&gt;</code> for both the <code>inbox</code> and the <code>arrivals</code>?  It comes down to the fact that it&rsquo;s not possible to easily use a <code>Queue&lt;T&gt;</code> for <code>arrivals</code> because of the way that Scan works.  At any point in the queue there could do a potential match so each item would have to be dequeued and processed separately, an indexed <code>List&lt;T&gt;</code> type is the best fit for this situation.</p>

<h3>scanArrivals / scanArrivalsUnsafe</h3>

<p>Lets look at the <code>scanArrivals</code> function, it&rsquo;s just a lock construct around the <code>scanArrivals</code> function.  This leads to an important point, the scan function is operating under a lock, which effectively means that end user code is also executed under the lock and if you hold onto the lock for any length of time then there will be significant blocking of the normal receive mechanism due to it also using the same lock when receiving.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>scanArrivals/scanArrivalsUnsafe </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="n">scanArrivalsUnsafe</span><span class="o">(</span><span class="n">f</span><span class="o">)</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">arrivals</span><span class="o">.</span><span class="nc">Count</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">then</span> <span class="nc">None</span>
</span><span class='line'><span class="k">else</span> <span class="k">let</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">arrivals</span><span class="o">.</span><span class="nc">Dequeue</span><span class="bp">()</span>
</span><span class='line'>     <span class="k">match</span> <span class="n">f</span> <span class="n">msg</span> <span class="k">with</span>
</span><span class='line'>     <span class="o">|</span> <span class="nc">None</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>         <span class="n">x</span><span class="o">.</span><span class="n">inbox</span><span class="o">.</span><span class="nc">Add</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'>         <span class="n">x</span><span class="o">.</span><span class="n">scanArrivalsUnsafe</span><span class="o">(</span><span class="n">f</span><span class="o">)</span>
</span><span class='line'>     <span class="o">|</span> <span class="n">res</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">res</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Lock the arrivals queue while we scan that</span>
</span><span class='line'><span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="n">scanArrivals</span><span class="o">(</span><span class="n">f</span><span class="o">)</span> <span class="o">=</span> <span class="n">lock</span> <span class="n">syncRoot</span> <span class="o">(</span><span class="k">fun</span> <span class="bp">()</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="o">;&gt;</span> <span class="n">x</span><span class="o">.</span><span class="n">scanArrivalsUnsafe</span><span class="o">(</span><span class="n">f</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If we pause for a second and review the <code>MailBoxProcessor</code> documentation on <a href="http://msdn.microsoft.com/en-us/library/ee353583.aspx" title="MSDN: F# MailbocProcessor">MSDN</a>:</p>

<blockquote><p>For each agent, at most one concurrent reader may be active, so no more than one concurrent call to Receive, TryReceive, Scan or TryScan may be active.</p></blockquote>

<p>Obeying this rule should ensure that no deadlock situations will arise but lock contentions can still arise as messages will still be being posted to the mailbox, which will in turn attempt to acquire the same <code>syncRoot</code> lock.</p>

<p>Lets move onto the next function, I have saved this one for last as its the most interesting.</p>

<h3>scanInbox</h3>

<p>A quick glance at <code>scanInbox</code> reveals another function which, to my eye, could have heavy-weight performance implications.   The <code>inbox</code> is a <code>List&lt;T&gt;</code> type, and the <code>RemoveAt</code> function does an internal <code>Array.Copy</code> for each removal.  This is an O(n) operation where n is (Count &ndash; index), so as soon as the list gets to a reasonable size then this then is going to really start chewing into your processing time.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="n">scanInbox</span><span class="o">(</span><span class="n">f</span><span class="o">,</span><span class="n">n</span><span class="o">)</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">match</span> <span class="n">inboxStore</span> <span class="k">with</span>
</span><span class='line'><span class="o">|</span> <span class="k">null</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">None</span>
</span><span class='line'><span class="o">|</span> <span class="n">inbox</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">n</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;=</span> <span class="n">inbox</span><span class="o">.</span><span class="nc">Count</span>
</span><span class='line'>    <span class="k">then</span> <span class="nc">None</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">inbox</span><span class="o">.[</span><span class="n">n</span><span class="o">]</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">f</span> <span class="n">msg</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">None</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">x</span><span class="o">.</span><span class="n">scanInbox</span> <span class="o">(</span><span class="n">f</span><span class="o">,</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|</span> <span class="n">res</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">inbox</span><span class="o">.</span><span class="nc">RemoveAt</span><span class="o">(</span><span class="n">n</span><span class="o">);</span> <span class="n">res</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In order to check this theory lets do some quick profiling of the console test that we showed earlier:</p>

<p><img class="<a" src="href="https://lh5.googleusercontent.com/-HRwdmElTHzk/UACUh2a0mmI/AAAAAAAABb0/X-PXjabROOU/s658/profile_run.png">https://lh5.googleusercontent.com/-HRwdmElTHzk/UACUh2a0mmI/AAAAAAAABb0/X-PXjabROOU/s658/profile_run.png</a>"></p>

<p>This screen shot was taken using <a href="http://www.jetbrains.com/profiler/" title="Jet Brains Performance Profiling">Jet Brains DotTrace 5.1</a>.  This is one of my favourite performance profilers because it captures results to line level and maps back to the F# source code relatively easily.</p>

<p>Yeah there it is, a whopping 44.41% of the time is spent in <code>RemoveAt</code>.  Also notice that there were 200,000 calls which mirrors the number we placed in the queue before using the Lock/Unlock message types.</p>

<p>One of the things that really stands out for me is that the <code>inbox</code> is a simple list and completely unbounded.  In a high throughput situation where the scan function is being used it&rsquo;s perfectly feasible to get into a runaway memory or CPU condition where the unmatched messages are sitting in the <code>inbox</code> taking longer and longer to processes due to the O(n) operation that takes place in the <code>RemoveAt</code> function.  Given a consistent throughput then eventually you are going to either run out memory, or the processing time will make throughput drop to dire levels which in turn will back up the <code>inbox</code> even further, effectively this is a death spiral.</p>

<h2>Conclusion</h2>

<p>So what conclusion can we draw from all of this?</p>

<ul>
<li>Firstly be careful with usage of <code>Scan</code> and <code>TryScan</code>, in certain situations the internal queue could back up to a certain size where you will be constantly struggling against the O(n) operation cost.</li>
<li>Agents are not a silver bullet solution. They cannot solve every problem.  Although it&rsquo;s possible to use agent based techniques to solve various problems like blocking collections and such like, you have to use care and diligence in the solution to avoid introducing another problems into the mix.  I have seen several implementations that I have been able to break relatively easily.</li>
<li>Do I still use agents?  <strong>Absolutely!</strong>  Agents are a fabulous tool to have in our toolbox and some extremely elegant solution exist to solve very complex problems.</li>
<li>Do I use <code>Scan</code> or <code>TryScan</code>?  Not in its current form in the <code>MailboxProcessor</code>.  I chose to implement a destructive scan in my <a href="/blog/2012/02/20/fsharp-dataflow-agents-III/" title="FSharp Dataflow agents - Part 3">TDF agent</a> for the reasons discussed here.</li>
</ul>


<p>Before we finish, I&rsquo;d like to briefly cover <code>TryScan</code> from my <a href="http://msdn.microsoft.com/en-us/devlabs/gg585582.aspx" title="TPL Dataflow">TDF</a> based agent to complete the picture.</p>

<h3>Destructive TryScan</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>TryScan </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">TryScan</span><span class="o">((</span><span class="n">scanner</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="nc">Msg</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="o">;&gt;</span> <span class="nc">Async</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;&lt;</span><span class="n">em</span><span class="o">&gt;&gt;</span> <span class="n">option</span><span class="o">),</span> <span class="n">timeout</span><span class="o">):</span> <span class="nc">Async</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">option</span><span class="o">&gt;</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">let</span> <span class="n">ts</span> <span class="o">=</span> <span class="nn">TimeSpan</span><span class="p">.</span><span class="nc">FromMilliseconds</span><span class="o">(</span><span class="kt">float</span> <span class="n">timeout</span><span class="o">)</span>
</span><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">loopForMsg</span> <span class="o">=</span> <span class="n">async</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">let</span><span class="o">!</span> <span class="n">msg</span> <span class="o">=</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">AwaitTask</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;|</span> <span class="n">incomingMessages</span><span class="o">.</span><span class="nc">ReceiveAsync</span><span class="o">(</span><span class="n">ts</span><span class="o">)</span>
</span><span class='line'>                                  <span class="o">.</span><span class="nc">ContinueWith</span><span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="n">tt</span><span class="o">:</span><span class="nc">Task</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;_&amp;</span><span class="n">gt</span><span class="o">;)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>                                      <span class="k">if</span> <span class="n">tt</span><span class="o">.</span><span class="nc">IsCanceled</span> <span class="o">||</span> <span class="n">tt</span><span class="o">.</span><span class="nc">IsFaulted</span> <span class="k">then</span> <span class="nc">None</span>
</span><span class='line'>                                      <span class="k">else</span> <span class="nc">Some</span> <span class="n">tt</span><span class="o">.</span><span class="nc">Result</span><span class="o">)</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">msg</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Some</span> <span class="n">m</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>  <span class="k">let</span> <span class="n">res</span> <span class="o">=</span> <span class="n">scanner</span> <span class="n">m</span>
</span><span class='line'>                 <span class="k">match</span> <span class="n">res</span> <span class="k">with</span>
</span><span class='line'>                 <span class="o">|</span> <span class="nc">None</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="k">return</span><span class="o">!</span> <span class="n">loopForMsg</span>
</span><span class='line'>                 <span class="o">|</span> <span class="nc">Some</span> <span class="n">res</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="k">return</span><span class="o">!</span> <span class="n">res</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">None</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="k">return</span> <span class="nc">None</span><span class="o">}</span>
</span><span class='line'><span class="n">loopForMsg</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A message is dequeued on the line 4 with <code>let! msg = Async.AwaitTask ...</code>.  This is then processed by the pattern matching expression on line 9 <code>| Some m -&gt;  let res = scanner m</code>.  If the result of the scanner function results in <code>None</code> being returned then the message is discarded and the next operation continues with another call to <code>loopForMsg</code>, otherwise the message is returned with <code>| Some res -&gt; return! res</code>.</p>

<p>One of the areas where I have a lot of experience is using pipelined operations based on input from network I/O.  One of the things that always causes a problem is unbounded situations such as having a queue with no absolute limit.  There comes a time when you have to protect yourself from what is effective a denial of service, you have to either destructively terminate messages or connections or route the overflowed data for processing later.</p>

<p>Until next time&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Back to the Primitive II]]></title>
    <link href="http://MoiraeSoftware.github.io/blog/2012/04/22/back-to-the-primitive-ii/"/>
    <updated>2012-04-22T10:23:00+01:00</updated>
    <id>http://MoiraeSoftware.github.io/blog/2012/04/22/back-to-the-primitive-ii</id>
    <content type="html"><![CDATA[<p>In the last post I discussed an asynchronous version of the <code>ManualResetEvent</code> and as promised this time we will be looking at an
 asynchronous version of the <code>AutoResetEvent</code>.  I&rsquo;m using <a href="http://blogs.msdn.com/b/pfxteam/archive/2012/02/11/10266923.aspx">Stephen Toubs post</a>
as reference and we will be building a version that is functional in style that maps straight into asynchronous work flows without and conversion
or adaptors.</p>

<h3>What is an AutoResetEvent?</h3>

<p>An <code>AutoResetEvent</code> can be described as a turnstile mechanism, it lets a single waiting person through before re-latching
waiting for the next signal.  This is opposed to a <code>ManualResetEvent</code> which functions like an ordinary gate. Calling Set opens
the gate, allowing any number of threads that are waiting to be let through. Calling Reset closes the gate.</p>

<h3>AsyncAutoResetEvent</h3>

<p>First of all here is the shape of the type that we will be building:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">AsyncAutoResetEvent</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">new</span> <span class="o">:</span> <span class="o">?</span><span class="n">reusethread</span><span class="o">:</span><span class="kt">bool</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">AsyncAutoResetEvent</span>
</span><span class='line'><span class="k">member</span> <span class="nc">Set</span> <span class="o">:</span> <span class="kt">unit</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="kt">unit</span>
</span><span class='line'><span class="k">member</span> <span class="nc">WaitAsync</span> <span class="o">:</span> <span class="kt">unit</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">Async</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="kt">bool</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Fairly simple: implied constructor, <code>Set</code> and <code>WaitAsync</code> members.</p>

<h3>Implied Constructor</h3>

<p>Thinking about this logically we may need the following items:</p>

<ul>
<li>A queue mechanism to store asynchronous waiters &ndash; <code>let mutable awaits = Queue&lt;_&gt;()</code>.</li>
<li>A way of knowing if a signal has been made in the absence of any waiters &ndash; <code>let mutable signalled = false</code>.</li>
<li>We can also declare a short-circuit asynchronous workflow for the situation that <code>Set()</code> is called before <code>WaitAsync()</code></li>
<li><code>let completed = async.Return true</code>.  This will save us constructing an <code>AsyncResultCell&lt;_&gt;</code> and going though the
rest of the asynchronous mechanism.</li>
</ul>


<p>Also notice that an optional parameter called <code>reusethread</code> is defined, we use the <code>?</code> prefix when defining it to make it
optional.  We then make use of the <code>defaultArg</code> function to give it a default value of false if a one is not passed in.  This
will be used in the <code>Set</code> operation to determine if the code will run on the same thread or a thread in the ThreadPool.<br/>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Threading</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Collections</span><span class="p">.</span><span class="nc">Generic</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">type</span> <span class="nc">AsyncAutoResetEvent</span><span class="o">(?</span><span class="n">reusethread</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mutable</span> <span class="n">awaits</span> <span class="o">=</span> <span class="nc">Queue</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;_&amp;</span><span class="n">gt</span><span class="o">;</span><span class="bp">()</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">mutable</span> <span class="n">signalled</span> <span class="o">=</span> <span class="bp">false</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">completed</span> <span class="o">=</span> <span class="n">async</span><span class="o">.</span><span class="nc">Return</span> <span class="bp">true</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">reuseThread</span> <span class="o">=</span> <span class="n">defaultArg</span> <span class="n">reusethread</span> <span class="bp">false</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>WaitAsync()</h3>

<p>The first step is to use  a locking construct to control access to the mutable queue <code>awaits</code>.  Inside this lock we
check to see if <code>signalled</code> is true and if so we reset it to false and return our pre-built <code>completed</code> asynchronous workflow.  If
signalled is false then we create a new <code>AsyncResultCell&lt;_&gt;</code> and add it to the queue then return the <code>AsyncResult</code> to the caller.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">WaitAsync</span><span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">lock</span> <span class="n">awaits</span> <span class="o">(</span><span class="k">fun</span> <span class="bp">()</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">signalled</span> <span class="k">then</span>
</span><span class='line'>                <span class="n">signalled</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;-</span> <span class="bp">false</span>
</span><span class='line'>                <span class="n">completed</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">are</span> <span class="o">=</span> <span class="nc">AsyncResultCell</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;_&amp;</span><span class="n">gt</span><span class="o">;</span><span class="bp">()</span>
</span><span class='line'>                <span class="n">awaits</span><span class="o">.</span><span class="nc">Enqueue</span> <span class="n">are</span>
</span><span class='line'>                <span class="n">are</span><span class="o">.</span><span class="nc">AsyncResult</span><span class="o">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Set()</h3>

<p>We first declare a function called <code>getWaiter()</code>, we use this function to return an <a href="http://msdn.microsoft.com/en-us/library/dd233245.aspx">option type</a>
 that is either <code>Some AsyncResultCell&lt;bool&gt;</code> or <code>None</code>.  We use the lock function to control access to the mutable queue <code>lock awaits</code>.  Once
inside the lock we use pattern matching to capture <code>awaits.Count</code> and <code>signalled</code>:</p>

<ul>
<li>The first pattern match <code>(x,_)</code> checks if there are any waiters (<code>awaits.Count &gt; 0</code>) and then dequeues an <code>AsyncResultCell&lt;bool&gt;</code> from the
queue and returns it within an option type: <code>Some &lt;| awaits.Dequeue()</code>.</li>
<li>The second pattern match <code>(_,y)</code> checks whether <code>signalled</code> is set to false before setting its value to true.  This causes next <code>WaitAsync()</code>
caller to get the short-circuited value <code>completed</code>.  This means that an <code>AsyncResultCell&lt;bool&gt;</code> does not need to be created and go though the
whole async mechanism.  We then return <code>None</code> as there is no waiter to be notified.</li>
<li>The final pattern match <code>(_,_)</code> is used when there are no waiting callers and <code>signalled</code> has already being set, there is simply nothing to do in
this situation so we return <code>None</code>.</li>
</ul>


<p>We use the <code>getWaiter()</code> function via pattern match.  If we have a result i.e. Some AsyncResultCell<bool> then we call <code>RegisterResult</code>
passing in <code>AsyncOK(true)</code> to indicate a completion.  Notice that we also pass in the <code>reuseThread</code> boolean that was declared as part of the
constructor.  If <code>reuseThread</code> is true then the notification to the waiter happens <strong>synchronously</strong> use this with care!  Personally I would stick
with the default of false to ensure that the operation is completed via the thread pool, unless you have a performance critical reason and the
waiting code that executes is <strong>very fast</strong>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Set</span><span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">getWaiter</span><span class="bp">()</span><span class="o">=</span>
</span><span class='line'>            <span class="n">lock</span> <span class="n">awaits</span> <span class="o">(</span><span class="k">fun</span> <span class="bp">()</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>                <span class="k">match</span> <span class="o">(</span><span class="n">awaits</span><span class="o">.</span><span class="nc">Count</span><span class="o">,</span> <span class="n">signalled</span><span class="o">)</span> <span class="k">with</span>
</span><span class='line'>                <span class="o">|</span> <span class="o">(</span><span class="n">x</span><span class="o">,_)</span> <span class="k">when</span> <span class="n">x</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">0</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">Some</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;|</span> <span class="n">awaits</span><span class="o">.</span><span class="nc">Dequeue</span><span class="bp">()</span>
</span><span class='line'>                <span class="o">|</span> <span class="o">(_,</span><span class="n">y</span><span class="o">)</span> <span class="k">when</span> <span class="ow">not</span> <span class="n">y</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">signalled</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;-</span> <span class="bp">true</span><span class="o">;</span><span class="nc">None</span>
</span><span class='line'>                <span class="o">|</span> <span class="o">(_,_)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">None</span><span class="o">)</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">getWaiter</span><span class="bp">()</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Some</span> <span class="n">a</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">a</span><span class="o">.</span><span class="nc">RegisterResult</span><span class="o">(</span><span class="nc">AsyncOk</span><span class="o">(</span><span class="bp">true</span><span class="o">),</span> <span class="n">reuseThread</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">None</span> <span class="o">_</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="bp">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The reason for using the <code>getWaiter()</code> function is to separate the locking function away from the notification, if <code>RegisterResult</code>
was called within the lock and <code>reuseThread</code> was true then the awaiting function would be called synchronously within the lock which
would not be a very good situation to be in.</p>

<p>So there we have it, I could take this series further and convert the other primitives that Stephen Toub describes but there should be
enough information in these two posts to set you on your way.  If anyone would like me to complete the series then let me know.  I
may well finish them off and post them on GitHub in the future, time permitting.</p>

<hr />

<h4>Musical inspiration during the creation of this post:</h4>

<ul>
<li>Pantera &ndash; Cowboys From Hell</li>
<li>Cacophony &ndash; Go Off<br/>
<img class="<a" src="href="http://upload.wikimedia.org/wikipedia/en/a/a8/CowboysFromHell.jpg">http://upload.wikimedia.org/wikipedia/en/a/a8/CowboysFromHell.jpg</a>" width="125" title="Pantera &ndash; Cowboys From Hell" >
<img class="<a" src="href="http://upload.wikimedia.org/wikipedia/en/0/09/Cacophony_-_1988_-_Go_Off%21.jpg">http://upload.wikimedia.org/wikipedia/en/0/09/Cacophony_-_1988_-_Go_Off%21.jpg</a>" width="125" title="Cacophony &ndash; Go Off" ></li>
</ul>


<p>Thanks for tuning in, until next time&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Back to the Primitive]]></title>
    <link href="http://MoiraeSoftware.github.io/blog/2012/04/12/back-to-the-primitive/"/>
    <updated>2012-04-12T07:55:00+01:00</updated>
    <id>http://MoiraeSoftware.github.io/blog/2012/04/12/back-to-the-primitive</id>
    <content type="html"><![CDATA[<p>In this post we are going <strong>back to the primitive</strong>.  No it&rsquo;s not about the same named song by Soulfly, <em>(which incidentally does contains F# notes)</em> but a return
to thread synchronisation primitives and their asynchronous counterparts.</p>

<p>We are going to be looking at an asynchronous version of the <a href="http://msdn.microsoft.com/en-us/library/system.threading.manualresetevent.aspx">ManualResetEvent</a>.  This was
recently covered by Stephen Toub on the <a href="http://blogs.msdn.com/b/pfxteam/archive/2012/02/11/10266920.aspx">pfx team blog</a>.  We will be taking a slightly different view on
this as we will be using asynchronous workflows which will give us nice idiomatic usage within F#.</p>

<p>First lets look of the shape of the type that Stephen defined:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">AsyncManualResetEvent</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">public</span> <span class="n">Task</span> <span class="n">WaitAsync</span><span class="p">();</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">Set</span><span class="p">();</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">Reset</span><span class="p">();</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now this can be used from within F# by using the <code>Async.AwaitTask</code> function from the Async module but this is like wrapping one asynchronous paradigm with another, and
although this does work, what if you want to avoid the overhead of wrappers and stay strictly within async workflows.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="n">asyncManualResetEvent</span><span class="bp">()</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">WaitAsync</span><span class="bp">()</span> <span class="o">:</span> <span class="kt">unit</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">Async</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="kt">bool</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'><span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Set</span><span class="bp">()</span> <span class="o">:</span> <span class="kt">unit</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="kt">unit</span>
</span><span class='line'><span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Reset</span><span class="bp">()</span> <span class="o">:</span> <span class="kt">unit</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="kt">unit</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>That&rsquo;s what we want to see!  I don&rsquo;t want to get into the details of the description of how the C# version works as Stephen does a very good job of that already.  What I will explain though is how we essentially do the same thing while staying with the realm of functional programming.  As we are getting into the lower lever details no doubt we will have to start relying on some low level locking primitives like Monitors, Semaphores, and Interlocked operations, even the F# core libraries have a
cornucopia of those.</p>

<p>Lets look at the first member <code>WaitAsync()</code>.  The first step is to create a something to store the result of the operation, all we will just be storing and returning
asynchronously is a boolean to indicate that the wait handle has been set.  To do this we use one of the types from the
<a href="http://fsharppowerpack.codeplex.com/">F# power pack</a> <code>AsyncResultCell&lt;'T&gt;</code>.  I think that such a type should of been exposed from the F# core libraries but it was
omitted for some reason.  There is a type called <code>ResultCell&lt;'T&gt;</code> with much the same functionality in the FSharp.Core.Control namespace but it is marked internal so
it&rsquo;s not available for our use.</p>

<p>We declare a <a href="http://msdn.microsoft.com/en-us/library/dd233186.aspx">reference cell</a> of type <code>AsyncResultCell&lt;'T&gt;</code> and then create the <code>WaitAsync()</code> member, all we have
to do is dereference the value of the reference cell with <code>!</code> and call its <code>AsyncResult</code> member, this gives us an <code>Async&lt;bool&gt;</code> which we can easily use in an asynchronous workflow.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="n">asyncManualResetEvent</span><span class="bp">()</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">let</span> <span class="n">aResCell</span> <span class="o">=</span> <span class="n">ref</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;|</span> <span class="nc">AsyncResultCell</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;_&amp;</span><span class="n">gt</span><span class="o">;</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">WaitAsync</span><span class="bp">()</span> <span class="o">=</span> <span class="o">(!</span><span class="n">aResCell</span><span class="o">).</span><span class="nc">AsyncResult</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The next bit is fairly simple too.  All we need to do is dereference the value of the reference cell, and invoke the <code>RegisterResult</code> member by passing in a value of
 <code>AsyncOk(true)</code>.  The boolean value of true will be used by the type inference system to constrain the value of the <code>Async&lt;_&gt;</code> returned from <code>WaitAsync</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Set</span><span class="bp">()</span> <span class="o">=</span> <span class="o">(!</span><span class="n">aResCell</span><span class="o">).</span><span class="nc">RegisterResult</span><span class="o">(</span><span class="nc">AsyncOk</span><span class="o">(</span><span class="bp">true</span><span class="o">))</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The last part is the most complex <em>(as usual)</em>.  Here we create a recursive function called <code>swap</code> that will try to exchange the <code>AsyncResultCell&lt;'T&gt;</code> for a new
one.  We dereference the reference cell to <code>currentValue</code>, then we use a CAS (Compare And Swap) operation to compare the <code>aResCell</code> with <code>currentValue</code> and if they
are equal <code>newVal</code> will replace <code>aResCell</code>.  On the next line if the result of the CAS operation means that <code>result</code> and <code>currentValue</code> are equal then we are finished,
otherwise we spin the current thread for 20 cycles using <code>Thread.SpinWait 20</code> before retrying the operation via recursion <code>swap newVal</code>.  This will be a lot less
expensive than switching to user or kernel mode locking, and the period of contention between threads should be very small.  Finally the swap operation is started
by passing in a new <code>AsyncResultCell&lt;'T&gt;</code>.</p>

<p>There are various other methods we could of used, for instance we could of wrapped a <code>ManualResetEvent</code> with a call to <code>Async.AwaitWaitHandle</code>, although this
would of meant using the kernel mode locking of the <code>ManualResetEvent</code> which is a bit more expensive.</p>

<p>In Stephen Toub&rsquo;s post he mentions Task&rsquo;s being orphaned due to the <code>Reset()</code> method being called before the <code>Task&lt;'T&gt;</code> has been completed, that shouldn&rsquo;t happen in our
implementation due the the closures being stored internally for completion by the async infrastructure.  Heres a quick test harness to make sure everything works as expected anyway.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Reset</span><span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">rec</span> <span class="n">swap</span> <span class="n">newVal</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">currentValue</span> <span class="o">=</span> <span class="o">!</span><span class="n">aResCell</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="nn">Interlocked</span><span class="p">.</span><span class="nc">CompareExchange</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;_&amp;</span><span class="n">gt</span><span class="o">;(</span><span class="n">aResCell</span><span class="o">,</span> <span class="n">newVal</span><span class="o">,</span> <span class="n">currentValue</span><span class="o">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">obj</span><span class="o">.</span><span class="nc">ReferenceEquals</span><span class="o">(</span><span class="n">result</span><span class="o">,</span> <span class="n">currentValue</span><span class="o">)</span> <span class="k">then</span> <span class="bp">()</span>
</span><span class='line'>        <span class="k">else</span> <span class="nn">Thread</span><span class="p">.</span><span class="nc">SpinWait</span> <span class="mi">20</span>
</span><span class='line'>             <span class="n">swap</span> <span class="n">newVal</span>
</span><span class='line'>    <span class="n">swap</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;|</span> <span class="nc">AsyncResultCell</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;_&amp;</span><span class="n">gt</span><span class="o">;</span><span class="bp">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">amre</span> <span class="o">=</span> <span class="n">asyncManualResetEvent</span><span class="bp">()</span>
</span><span class='line'><span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="n">async</span><span class="o">{</span><span class="k">let</span><span class="o">!</span> <span class="n">x</span> <span class="o">=</span> <span class="n">amre</span><span class="o">.</span><span class="nc">WaitAsync</span><span class="bp">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>          <span class="nn">Console</span><span class="p">.</span><span class="nc">WriteLine</span><span class="o">(</span><span class="s2">&quot;First signalled&quot;</span><span class="o">)}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">let</span> <span class="n">y</span> <span class="o">=</span> <span class="n">async</span><span class="o">{</span><span class="k">let</span><span class="o">!</span> <span class="n">x</span> <span class="o">=</span> <span class="n">amre</span><span class="o">.</span><span class="nc">WaitAsync</span><span class="bp">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>         <span class="nn">Console</span><span class="p">.</span><span class="nc">WriteLine</span><span class="o">(</span><span class="s2">&quot;Second signalled&quot;</span><span class="o">)}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">let</span> <span class="n">z</span> <span class="o">=</span> <span class="n">async</span><span class="o">{</span><span class="k">let</span><span class="o">!</span> <span class="n">x</span> <span class="o">=</span> <span class="n">amre</span><span class="o">.</span><span class="nc">WaitAsync</span><span class="bp">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>          <span class="nn">Console</span><span class="p">.</span><span class="nc">WriteLine</span><span class="o">(</span><span class="s2">&quot;Third signalled&quot;</span><span class="o">)}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//start async workflows x and y</span>
</span><span class='line'><span class="nn">Async</span><span class="p">.</span><span class="nc">Start</span> <span class="n">x</span>
</span><span class='line'><span class="nn">Async</span><span class="p">.</span><span class="nc">Start</span> <span class="n">y</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//reset the asyncManualResetEvent, this will test whether the async workflows x and y</span>
</span><span class='line'><span class="c1">// are orphaned due to the AsyncResultCell being recycled.</span>
</span><span class='line'><span class="n">amre</span><span class="o">.</span><span class="nc">Reset</span><span class="bp">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//now start the async z</span>
</span><span class='line'><span class="nn">Async</span><span class="p">.</span><span class="nc">Start</span> <span class="n">z</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//we set a single time, this should result in the three async workflows completing</span>
</span><span class='line'><span class="n">amre</span><span class="o">.</span><span class="nc">Set</span><span class="bp">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nn">Console</span><span class="p">.</span><span class="nc">ReadLine</span><span class="bp">()</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here we can see everything works out as we expected:</p>

<p><img class="<a" src="href="https://lh6.googleusercontent.com/-NYIKC5Gaahs/T4YAQGtP9RI/AAAAAAAABR8/_cTOriC1_Fw/amre.png">https://lh6.googleusercontent.com/-NYIKC5Gaahs/T4YAQGtP9RI/AAAAAAAABR8/_cTOriC1_Fw/amre.png</a>" title="" ></p>

<p>Thats all there is too it, next time I will be exploring an asyncAutoResetEvent in much the same vein.</p>

<hr />

<h4>Musical inspiration during the creation of this post:</h4>

<ul>
<li>Smashing Pumpkins &ndash; Zeitgeist</li>
<li>Soulfly &ndash; Primitive</li>
<li>FooFighters &ndash; FooFighters<br/>
<img class="<a" src="href="http://upload.wikimedia.org/wikipedia/en/f/fb/Zeitgeist_cover.png">http://upload.wikimedia.org/wikipedia/en/f/fb/Zeitgeist_cover.png</a>" width="125" title="Smashing Pumpkins Zeitgeist" ><img class="<a" src="href="http://upload.wikimedia.org/wikipedia/en/3/34/Primitive.png">http://upload.wikimedia.org/wikipedia/en/3/34/Primitive.png</a>" width="125" title="Soulfly Primitive" ><img class="<a" src="href="http://upload.wikimedia.org/wikipedia/en/0/0d/FooFighters-FooFighters.jpg">http://upload.wikimedia.org/wikipedia/en/0/0d/FooFighters-FooFighters.jpg</a>" width="125" title="FooFighters" ></li>
</ul>


<p>Until next time&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Black-Scholes Taste Test]]></title>
    <link href="http://MoiraeSoftware.github.io/blog/2012/03/11/black-scholes-taste-test/"/>
    <updated>2012-03-11T23:58:00+00:00</updated>
    <id>http://MoiraeSoftware.github.io/blog/2012/03/11/black-scholes-taste-test</id>
    <content type="html"><![CDATA[<p>In this edition we are going to be doing a taste test, C# vs F#.  Oh yeah, if you quickly glanced at the title you may
have thought this was a recipe for black scones, as interesting and tasty as that may be, unfortunately its going
to be finance related.</p>

<p>I recently presented a paper on the benefits of F#, part of this was a comparison of the famous
<a href="http://en.wikipedia.org/wiki/Black-Scholes">Black-Scholes</a> equation in both C# and F#.  I was mainly going to be
looking at code succinctness and the inherent suitability of the language for calculation based work, but there ended
up being more to it than that.</p>

<p>First of all I quickly set up a test rig to run 50 million iterations of the algorithm to see if there were any difference
in the processing speed.  I want expecting any major differences at this point but here&rsquo;s what I got:</p>

<p>C# results for 50 million iterations <img class="<a" src="href="https://lh6.googleusercontent.com/-cEzGoE_P2cE/T1vf_SxtGfI/AAAAAAAABRE/RE4ReRLAhu8/s531/csbs.png">https://lh6.googleusercontent.com/-cEzGoE_P2cE/T1vf_SxtGfI/AAAAAAAABRE/RE4ReRLAhu8/s531/csbs.png</a>"></p>

<p>F# results for 50 million iterations <img class="<a" src="href="https://lh3.googleusercontent.com/-PLdltL0YiIs/T1vf_Wo2ZrI/AAAAAAAABRI/WijGdNaOnK4/s531/fsbs.png">https://lh3.googleusercontent.com/-PLdltL0YiIs/T1vf_Wo2ZrI/AAAAAAAABRI/WijGdNaOnK4/s531/fsbs.png</a>"></p>

<p>I think you will agree that&rsquo;s quite a difference, lets have a look at the code to see what&rsquo;s going on.</p>

<h2>C# Implementation</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Options</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">public</span> <span class="k">enum</span> <span class="n">Style</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Call</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Put</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="kt">double</span> <span class="nf">BlackScholes</span><span class="p">(</span><span class="n">Style</span> <span class="n">callPut</span><span class="p">,</span> <span class="kt">double</span> <span class="n">s</span><span class="p">,</span> <span class="kt">double</span> <span class="n">x</span><span class="p">,</span> <span class="kt">double</span> <span class="n">t</span><span class="p">,</span> <span class="kt">double</span> <span class="n">r</span><span class="p">,</span> <span class="kt">double</span> <span class="n">v</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">result</span> <span class="p">=</span> <span class="m">0.0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">d1</span> <span class="p">=</span> <span class="p">(</span><span class="n">Math</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="n">s</span> <span class="p">/</span> <span class="n">x</span><span class="p">)</span> <span class="p">+</span> <span class="p">(</span><span class="n">r</span> <span class="p">+</span> <span class="n">v</span> <span class="p">*</span> <span class="n">v</span> <span class="p">/</span> <span class="m">2.0</span><span class="p">)</span> <span class="p">*</span> <span class="n">t</span><span class="p">)</span> <span class="p">/</span> <span class="p">(</span><span class="n">v</span> <span class="p">*</span> <span class="n">Math</span><span class="p">.</span><span class="n">Sqrt</span><span class="p">(</span><span class="n">t</span><span class="p">));</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">d2</span> <span class="p">=</span> <span class="n">d1</span> <span class="p">-</span> <span class="n">v</span> <span class="p">*</span> <span class="n">Math</span><span class="p">.</span><span class="n">Sqrt</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">callPut</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">Style</span><span class="p">.</span><span class="n">Call</span><span class="p">:</span>
</span><span class='line'>            <span class="n">result</span> <span class="p">=</span> <span class="n">s</span> <span class="p">*</span> <span class="n">Cnd</span><span class="p">(</span><span class="n">d1</span><span class="p">)</span> <span class="p">-</span><span class="n">x</span> <span class="p">*</span> <span class="n">Math</span><span class="p">.</span><span class="n">Exp</span><span class="p">(-</span><span class="n">r</span> <span class="p">*</span> <span class="n">t</span><span class="p">)</span> <span class="p">*</span> <span class="n">Cnd</span><span class="p">(</span><span class="n">d2</span><span class="p">);</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">Style</span><span class="p">.</span><span class="n">Put</span><span class="p">:</span>
</span><span class='line'>            <span class="n">result</span> <span class="p">=</span> <span class="n">x</span> <span class="p">*</span> <span class="n">Math</span><span class="p">.</span><span class="n">Exp</span><span class="p">(-</span><span class="n">r</span> <span class="p">*</span> <span class="n">t</span><span class="p">)</span> <span class="p">*</span> <span class="n">Cnd</span><span class="p">(-</span><span class="n">d2</span><span class="p">)</span> <span class="p">-</span><span class="n">s</span> <span class="p">*</span> <span class="n">Cnd</span><span class="p">(-</span><span class="n">d1</span><span class="p">);</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">static</span> <span class="kt">double</span> <span class="nf">Cnd</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">double</span> <span class="n">a1</span> <span class="p">=</span> <span class="m">0.31938153</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">double</span> <span class="n">a2</span> <span class="p">=</span> <span class="p">-</span><span class="m">0.356563782</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">double</span> <span class="n">a3</span> <span class="p">=</span> <span class="m">1.781477937</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">double</span> <span class="n">a4</span> <span class="p">=</span> <span class="p">-</span><span class="m">1.821255978</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">double</span> <span class="n">a5</span> <span class="p">=</span> <span class="m">1.330274429</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">l</span> <span class="p">=</span> <span class="n">Math</span><span class="p">.</span><span class="n">Abs</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">k</span> <span class="p">=</span> <span class="m">1.0</span> <span class="p">/</span> <span class="p">(</span><span class="m">1.0</span> <span class="p">+</span> <span class="m">0.2316419</span> <span class="p">*</span> <span class="n">l</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">w</span> <span class="p">=</span> <span class="m">1.0</span> <span class="p">-</span> <span class="m">1.0</span> <span class="p">/</span> <span class="n">Math</span><span class="p">.</span><span class="n">Sqrt</span><span class="p">(</span><span class="m">2</span> <span class="p">*</span> <span class="n">Math</span><span class="p">.</span><span class="n">PI</span><span class="p">)</span> <span class="p">*</span>
</span><span class='line'>        <span class="n">Math</span><span class="p">.</span><span class="n">Exp</span><span class="p">(-</span><span class="n">l</span> <span class="p">*</span> <span class="n">l</span> <span class="p">/</span> <span class="m">2.0</span><span class="p">)</span> <span class="p">*</span> <span class="p">(</span><span class="n">a1</span> <span class="p">*</span> <span class="n">k</span> <span class="p">+</span> <span class="n">a2</span> <span class="p">*</span> <span class="n">k</span> <span class="p">*</span> <span class="n">k</span> <span class="p">+</span> <span class="n">a3</span> <span class="p">*</span>
</span><span class='line'>            <span class="n">Math</span><span class="p">.</span><span class="n">Pow</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="m">3</span><span class="p">)</span> <span class="p">+</span> <span class="n">a4</span> <span class="p">*</span> <span class="n">Math</span><span class="p">.</span><span class="n">Pow</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="m">4</span><span class="p">)</span> <span class="p">+</span> <span class="n">a5</span> <span class="p">*</span> <span class="n">Math</span><span class="p">.</span><span class="n">Pow</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="m">5</span><span class="p">));</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="m">1.0</span> <span class="p">-</span> <span class="n">w</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">w</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>F# Implementation</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="n">options</span>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">type</span> <span class="nc">Style</span> <span class="o">=</span> <span class="nc">Call</span> <span class="o">|</span> <span class="nc">Put</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">let</span> <span class="n">cnd</span> <span class="n">x</span> <span class="o">=</span>
</span><span class='line'>   <span class="k">let</span> <span class="n">a1</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">31938153</span>
</span><span class='line'>   <span class="k">let</span> <span class="n">a2</span> <span class="o">=</span> <span class="o">-</span><span class="mi">0</span><span class="o">.</span><span class="mi">356563782</span>
</span><span class='line'>   <span class="k">let</span> <span class="n">a3</span> <span class="o">=</span> <span class="mi">1</span><span class="o">.</span><span class="mi">781477937</span>
</span><span class='line'>   <span class="k">let</span> <span class="n">a4</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="mi">821255978</span>
</span><span class='line'>   <span class="k">let</span> <span class="n">a5</span> <span class="o">=</span> <span class="mi">1</span><span class="o">.</span><span class="mi">330274429</span>
</span><span class='line'>   <span class="k">let</span> <span class="n">l</span>  <span class="o">=</span> <span class="n">abs</span> <span class="n">x</span>
</span><span class='line'>   <span class="k">let</span> <span class="n">k</span>  <span class="o">=</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span> <span class="o">/</span> <span class="o">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span> <span class="o">+</span> <span class="mi">0</span><span class="o">.</span><span class="mi">2316419</span> <span class="o">*</span> <span class="n">l</span><span class="o">)</span>
</span><span class='line'>   <span class="k">let</span> <span class="n">w</span>  <span class="o">=</span> <span class="o">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="o">;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span> <span class="o">/</span> <span class="n">sqrt</span><span class="o">(</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span> <span class="o">*</span> <span class="nn">Math</span><span class="p">.</span><span class="nc">PI</span><span class="o">)</span> <span class="o">*&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>            <span class="n">exp</span><span class="o">(-</span><span class="n">l</span> <span class="o">*</span> <span class="n">l</span> <span class="o">/</span> <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">)</span> <span class="o">*</span> <span class="o">(</span><span class="n">a1</span> <span class="o">*</span> <span class="n">k</span> <span class="o">+</span> <span class="n">a2</span> <span class="o">*</span> <span class="n">k</span> <span class="o">*</span> <span class="n">k</span> <span class="o">+</span> <span class="n">a3</span> <span class="o">*</span>
</span><span class='line'>                <span class="o">(</span><span class="n">pown</span> <span class="n">k</span> <span class="mi">3</span><span class="o">)</span> <span class="o">+</span> <span class="n">a4</span> <span class="o">*</span> <span class="o">(</span><span class="n">pown</span> <span class="n">k</span> <span class="mi">4</span><span class="o">)</span> <span class="o">+</span> <span class="n">a5</span> <span class="o">*</span> <span class="o">(</span><span class="n">pown</span> <span class="n">k</span> <span class="mi">5</span><span class="o">)))</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="k">if</span> <span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span> <span class="k">then</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="o">;</span> <span class="n">w</span>
</span><span class='line'>   <span class="k">else</span> <span class="n">w</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">let</span> <span class="n">blackscholes</span> <span class="n">style</span> <span class="n">s</span> <span class="n">x</span> <span class="n">t</span> <span class="n">r</span> <span class="n">v</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">let</span> <span class="n">d1</span> <span class="o">=</span> <span class="o">(</span><span class="n">log</span><span class="o">(</span><span class="n">s</span> <span class="o">/</span> <span class="n">x</span><span class="o">)</span> <span class="o">+</span> <span class="o">(</span><span class="n">r</span> <span class="o">+</span> <span class="n">v</span> <span class="o">*</span> <span class="n">v</span> <span class="o">/</span> <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">)</span> <span class="o">*</span> <span class="n">t</span><span class="o">)</span> <span class="o">/</span> <span class="o">(</span><span class="n">v</span> <span class="o">*</span> <span class="n">sqrt</span><span class="o">(</span><span class="n">t</span><span class="o">))</span>
</span><span class='line'><span class="k">let</span> <span class="n">d2</span> <span class="o">=</span> <span class="n">d1</span> <span class="o">-</span> <span class="n">v</span> <span class="o">*</span> <span class="n">sqrt</span><span class="o">(</span><span class="n">t</span><span class="o">)</span>
</span><span class='line'><span class="k">match</span> <span class="n">style</span> <span class="k">with</span>
</span><span class='line'><span class="o">|</span> <span class="nc">Call</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">s</span> <span class="o">*</span> <span class="n">cnd</span><span class="o">(</span><span class="n">d1</span><span class="o">)</span> <span class="o">-</span><span class="n">x</span> <span class="o">*</span> <span class="n">exp</span><span class="o">(-</span><span class="n">r</span> <span class="o">*</span> <span class="n">t</span><span class="o">)</span> <span class="o">*</span> <span class="n">cnd</span><span class="o">(</span><span class="n">d2</span><span class="o">)</span>
</span><span class='line'><span class="o">|</span> <span class="nc">Put</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">x</span> <span class="o">*</span> <span class="n">exp</span><span class="o">(-</span><span class="n">r</span> <span class="o">*</span> <span class="n">t</span><span class="o">)</span> <span class="o">*</span> <span class="n">cnd</span><span class="o">(-</span><span class="n">d2</span><span class="o">)</span> <span class="o">-</span><span class="n">s</span> <span class="o">*</span> <span class="n">cnd</span><span class="o">(-</span><span class="n">d1</span><span class="o">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Differences</h2>

<p>The most significant differences when the code is compiled comes down to a few areas.</p>

<h3>The BlackScholes function</h3>

<p>The first thing to note is the code size and number of local variables:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>F# </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Code size       122 (0x7a)
</span><span class='line'>.maxstack  6
</span><span class='line'>.locals init ([0] float64 d1,&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>     [1] float64 d2)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>C# </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Code size       164 (0xa4)
</span><span class='line'>.maxstack  4
</span><span class='line'>.locals init ([0] float64 d1,&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>     [1] float64 d2,
</span><span class='line'>     [2] float64 result,
</span><span class='line'>     [3] valuetype CsBs.Options/Style CS$0$0000)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The initial arguments that are loaded in the F# implementation is done in fewer IL op codes then C#.<br/>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>F# </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IL_0001:  ldarg.1
</span><span class='line'>IL_0002:  ldarg.2
</span><span class='line'>IL_0003:  div
</span><span class='line'>IL_0004:  call       float64 [mscorlib]System.Math::Log(float64)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>C#  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IL_0000:  ldc.r8     0.0
</span><span class='line'>IL_0009:  stloc.0
</span><span class='line'>IL_000a:  ldc.r8     0.0
</span><span class='line'>IL_0013:  stloc.1
</span><span class='line'>IL_0014:  ldc.r8     0.0
</span><span class='line'>IL_001d:  stloc.2
</span><span class='line'>IL_001e:  ldarg.1
</span><span class='line'>IL_001f:  ldarg.2
</span><span class='line'>IL_0020:  div
</span><span class='line'>IL_0021:  call       float64 [mscorlib]System.Math::Log(float64)</span></code></pre></td></tr></table></div></figure></notextile></div>
You can see in the C# code is intialising the local variable to 0.0 by pushing them to the stack
<code>ldc.r8</code> then storing them <code>stloc.0</code>.</p>

<p>The pattern matching in the F# code results in a call to get the style <code>options/Style::get_Tag()</code>
and then a branch if not equal opcode <code>bne.un.s</code> which causes a jump to <code>IL_005d</code>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IL_0036:  call       instance int32 options/Style::get_Tag()```
</span><span class='line'>IL_003b:  ldc.i4.1
</span><span class='line'>IL_003c:  bne.un.s   IL_005d</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The C# version loads the local variable for the <code>Style</code> <code>IL_0053:  stloc.3</code> and then uses the switch
opcode to jump table to jump to either position <code>IL_0064</code> or <code>IL_0083</code>.
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IL_0053:  stloc.3
</span><span class='line'>IL_0054:  ldloc.3
</span><span class='line'>IL_0055:  switch     (&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>                  IL_0064,
</span><span class='line'>                  IL_0083)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>IL_0062:  br.s       IL_00a2</span></code></pre></td></tr></table></div></figure></notextile></div>
These are negligible, I&rsquo;m mealy pointing out the differences in compilation between the two languages.<br/>
The F# compiler is more stringent when compiling the code.</p>

<h3>The Cnd function</h3>

<p>The Cnd function or <a href="http://en.wikipedia.org/wiki/Normal_distribution">cumulative normal distribution</a>
is where the performance differences occur.</p>

<p>Again at initialization you can see the C# version is larger by 41.<br/>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>F# </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Code size       213 (0xd5)
</span><span class='line'>.maxstack  8
</span><span class='line'>.locals init ([0] float64 l,&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>     [1] float64 k,
</span><span class='line'>     [2] float64 w)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>C#  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Code size       254 (0xfe)
</span><span class='line'>.maxstack  6
</span><span class='line'>.locals init ([0] float64 l,&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>     [1] float64 k,
</span><span class='line'>     [2] float64 w)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The C# version initialises all the local variables to 0.0.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>C#  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IL_0000:  ldc.r8     0.0
</span><span class='line'>IL_0009:  stloc.0
</span><span class='line'>IL_000a:  ldc.r8     0.0
</span><span class='line'>IL_0013:  stloc.1
</span><span class='line'>IL_0014:  ldc.r8     0.0
</span><span class='line'>IL_001d:  stloc.2</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Interestingly the C# compiler optimises out the call to <code>Math.PI * 2</code> but the F# compiler doesn&rsquo;t.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>F#  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IL_003a:  ldc.r8     2.
</span><span class='line'>IL_0043:  ldc.r8     3.1415926535897931
</span><span class='line'>IL_004c:  mul</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>C#  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IL_0057:  ldc.r8     6.2831853071795862</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>From here everything is identical until we get to the power operator section (<code>Math.Pow</code> in the C# version and <code>pown</code> in F#).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>F#  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IL_0089:  ldloc.1
</span><span class='line'>IL_008a:  ldc.i4.3
</span><span class='line'>IL_008b:  call       float64 [FSharp.Core]Microsoft.FSharp.Core.Operators/OperatorIntrinsics::PowDouble(float64,&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>                                                                                                    int32)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div>
In the F# code we are using the <code>pown</code> function which calculates the power to an integer.  This is shown in the
call to <code>OperatorIntrinsics::PowDouble</code> which uses the value in <code>IL_0089:  ldloc.1</code> and also loads the
integer 3 with <code>IL_008a:  ldc.i4.3</code>.<br/>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>C#  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;br/>
</span><span class='line'>IL_009c:  ldloc.1
</span><span class='line'>IL_009d:  ldc.r8     3.
</span><span class='line'>IL_00a6:  call       float64 [mscorlib]System.Math::Pow(float64,&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>                                                    float64)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div>
The C# code is using the standard Math.Pow operator which operates on two float64 numbers.  The value of 3 is
implicitly converted into a <code>float64</code> during compilation <code>IL_009d:  ldc.r8     3.</code>.</p>

<p>The final difference is at the end of the function.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>F#  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IL_00b8:  stloc.2
</span><span class='line'>IL_00b9:  ldarg.0
</span><span class='line'>IL_00ba:  ldc.r8     0.0
</span><span class='line'>IL_00c3:  clt
</span><span class='line'>IL_00c5:  brfalse.s  IL_00d3
</span><span class='line'>IL_00c7:  ldc.r8     1.
</span><span class='line'>IL_00d0:  ldloc.2
</span><span class='line'>IL_00d1:  sub
</span><span class='line'>IL_00d2:  ret
</span><span class='line'>IL_00d3:  ldloc.2
</span><span class='line'>IL_00d4:  ret</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The F# version uses the <code>clt</code> opcode.  This pushes 1 if value one on the stack is less than value two otherwise
it pushes 0.  There is then a <code>brfalse.s</code> which jumps to location <code>IL_00d3</code> if the first value on the stack is
less than or equal to the second value.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>C#  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IL_00b8:  stloc.2
</span><span class='line'>IL_00b9:  ldarg.0
</span><span class='line'>IL_00e5:  ldc.r8     0.0
</span><span class='line'>IL_00ee:  bge.un.s   IL_00fc
</span><span class='line'>IL_00f0:  ldc.r8     1.
</span><span class='line'>IL_00f9:  ldloc.2
</span><span class='line'>IL_00fa:  sub
</span><span class='line'>IL_00fb:  ret
</span><span class='line'>IL_00fc:  ldloc.2
</span><span class='line'>IL_00fd:  ret</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The C# version uses the <code>bge.un.s</code> to jump to location <code>IL_00fc</code> if the first value on the stack is greater than
the second.  This is negligible in normal runtime but it is interesting to note the difference between the two.</p>

<h2>Conclusion</h2>

<p>Wow, there was a lot of IL to get through, I hope you stayed with me!</p>

<p>Although the difference in some areas are negligible, every little counts.  The implicit conversion of an integer
field to a <code>float64</code> hides the fact that we were using an optimized integer power function in F#, that&rsquo;s performance
increase of 168%!  Some other side effects of implicit conversion can also lead to subtle bugs due to truncation
and overflow.  The other benefits are the compiled code uses less instructions and the source code only uses 25
lines compared to 44 in C#.</p>

<p>Until next time!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FSharp Dataflow agents III]]></title>
    <link href="http://MoiraeSoftware.github.io/blog/2012/02/20/fsharp-dataflow-agents-iii/"/>
    <updated>2012-02-20T07:30:00+00:00</updated>
    <id>http://MoiraeSoftware.github.io/blog/2012/02/20/fsharp-dataflow-agents-iii</id>
    <content type="html"><![CDATA[<p>This will be the last post on rebuilding the <code>MailboxProcessor</code> using <a href="http://msdn.microsoft.com/en-us/devlabs/gg585582">TDF</a>,
here&rsquo;s a quick discussion of the missing pieces&hellip;</p>

<p>First, lets start with the simple ones, these don&rsquo;t really require much discussion.</p>

<h3>DefaultTimeout</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="k">mutable</span> <span class="n">defaultTimeout</span> <span class="o">=</span> <span class="nn">Timeout</span><span class="p">.</span><span class="nc">Infinite</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">DefaultTimeout</span>
</span><span class='line'>   <span class="k">with</span> <span class="n">get</span><span class="bp">()</span> <span class="o">=</span> <span class="n">defaultTimeout</span>
</span><span class='line'>   <span class="k">and</span> <span class="n">set</span><span class="o">(</span><span class="n">value</span><span class="o">)</span> <span class="o">=</span> <span class="n">defaultTimeout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">ndash</span><span class="o">;</span> <span class="n">value</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
This simply provides a mutable property using <code>Timeout.Infinite</code> as a default setting.</p>

<h3>CurrentQueueLength</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">CurrentQueueLength</span><span class="bp">()</span> <span class="o">=</span> <span class="n">incomingMessages</span><span class="o">.</span><span class="nc">Count</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Another simple one, this methods uses into the underlying <code>BufferBlock</code> to extract its current queue length using its <code>Count</code> property.</p>

<h3>TryReceive</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">TryReceive</span><span class="o">(?</span><span class="n">timeout</span><span class="o">)</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">let</span> <span class="n">ts</span> <span class="o">=</span> <span class="nn">TimeSpan</span><span class="p">.</span><span class="nc">FromMilliseconds</span><span class="o">(</span><span class="kt">float</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;|</span> <span class="n">defaultArg</span> <span class="n">time</span> <span class="n">out</span> <span class="n">defaultTimeout</span><span class="o">)</span>
</span><span class='line'><span class="nn">Async</span><span class="p">.</span><span class="nc">AwaitTask</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;|</span> <span class="n">incomingMessages</span><span class="o">.</span><span class="nc">ReceiveAsync</span><span class="o">(</span><span class="n">ts</span><span class="o">)</span>
</span><span class='line'>                       <span class="o">.</span><span class="nc">ContinueWith</span><span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="n">tt</span><span class="o">:</span><span class="nc">Task</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;_&amp;</span><span class="n">gt</span><span class="o">;)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>                                         <span class="k">if</span> <span class="n">tt</span><span class="o">.</span><span class="nc">IsCanceled</span> <span class="o">||</span> <span class="n">tt</span><span class="o">.</span><span class="nc">IsFaulted</span> <span class="k">then</span> <span class="nc">None</span>
</span><span class='line'>                                         <span class="k">else</span> <span class="nc">Some</span> <span class="n">tt</span><span class="o">.</span><span class="nc">Result</span><span class="o">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Here we get a little help from <a href="http://msdn.microsoft.com/en-us/library/dd460717.aspx">TPL</a> to apply a continuation on completion
using <code>ContinueWith</code>.  We use a lambda to return either <code>None</code>, in a time out condition, or <code>Some tt.Result</code> when we successfully receive an item.</p>

<h3>TryPostAndReply</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">AsyncResultCell</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">a</span><span class="o">&gt;</span><span class="bp">()</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;...</span>
</span><span class='line'><span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">TryWaitResultSynchronously</span><span class="o">(</span><span class="n">timeout</span><span class="o">:</span><span class="kt">int</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="c1">//early completion check</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">source</span><span class="o">.</span><span class="nn">Task</span><span class="p">.</span><span class="nc">IsCompleted</span> <span class="k">then</span>
</span><span class='line'>        <span class="nc">Some</span> <span class="n">source</span><span class="o">.</span><span class="nn">Task</span><span class="p">.</span><span class="nc">Result</span>
</span><span class='line'>    <span class="c1">//now force a wait for the task to complete</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">source</span><span class="o">.</span><span class="nn">Task</span><span class="p">.</span><span class="nc">Wait</span><span class="o">(</span><span class="n">timeout</span><span class="o">)</span> <span class="k">then</span>
</span><span class='line'>            <span class="nc">Some</span> <span class="n">source</span><span class="o">.</span><span class="nn">Task</span><span class="p">.</span><span class="nc">Result</span>
</span><span class='line'>        <span class="k">else</span> <span class="nc">None</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">TryPostAndReply</span><span class="o">(</span><span class="n">replyChannelMsg</span><span class="o">,</span> <span class="o">?</span><span class="n">timeout</span><span class="o">)</span> <span class="o">:&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="nc">Reply</span> <span class="n">option</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">let</span> <span class="n">timeout</span> <span class="o">=</span> <span class="n">defaultArg</span> <span class="n">timeout</span> <span class="n">defaultTimeout</span>
</span><span class='line'><span class="k">let</span> <span class="n">resultCell</span> <span class="o">=</span> <span class="nc">AsyncResultCell</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;_&amp;</span><span class="n">gt</span><span class="o">;</span><span class="bp">()</span>
</span><span class='line'><span class="k">let</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">replyChannelMsg</span><span class="o">(</span><span class="k">new</span> <span class="nc">AsyncReplyChannel</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;_&amp;</span><span class="n">gt</span><span class="o">;(</span><span class="k">fun</span> <span class="n">reply</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">resultCell</span><span class="o">.</span><span class="nc">RegisterResult</span><span class="o">(</span><span class="n">reply</span><span class="o">)))</span>
</span><span class='line'><span class="k">if</span> <span class="n">incomingMessages</span><span class="o">.</span><span class="nc">Post</span><span class="o">(</span><span class="n">msg</span><span class="o">)</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">resultCell</span><span class="o">.</span><span class="nc">TryWaitResultSynchronously</span><span class="o">(</span><span class="n">timeout</span><span class="o">)</span>
</span><span class='line'><span class="k">else</span> <span class="nc">None</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Things get a little more interesting from here on in.  Firstly we need to add a new synchronisation member to the <code>AsyncResultCell&lt;'a&gt;</code> type: <code>TryWaitResultSynchronously</code>.   We again enlist the help of the TPL primitives to check for the early completion using <code>source.Task.IsCompleted</code> returning the result if it is there, otherwise we use the <code>Task</code> property&rsquo;s <code>Wait</code> method to check the item returns within the time out interval.  In the usual manner, <code>Some source.Task.Result</code> is returned or <code>None</code> for a failure.</p>

<h3>PostAndReply</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">PostAndReply</span><span class="o">(</span><span class="n">replyChannelMsg</span><span class="o">,</span> <span class="o">?</span><span class="n">timeout</span><span class="o">)</span> <span class="o">:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="nc">Reply</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">match</span> <span class="n">x</span><span class="o">.</span><span class="nc">TryPostAndReply</span><span class="o">(</span><span class="n">replyChannelMsg</span><span class="o">,</span> <span class="o">?</span><span class="n">timeout</span> <span class="o">=</span> <span class="n">timeout</span><span class="o">)</span> <span class="k">with</span>
</span><span class='line'><span class="o">|</span> <span class="nc">None</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>  <span class="n">raise</span> <span class="o">(</span><span class="nc">TimeoutException</span><span class="o">(</span><span class="s2">&quot;PostAndReply timed out&quot;</span><span class="o">))</span>
</span><span class='line'><span class="o">|</span> <span class="nc">Some</span> <span class="n">result</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">result</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
This one wraps a call to <code>TryPostAndReply</code> with some pattern matching.  In the event of a time out <code>None</code> is returned from <code>TryPostAndReply</code> in this instance we raise a <code>TimeoutException</code> otherwise we unwrap the result from the option using <code>| Some result -&gt; result</code>.</p>

<h3>TryScan</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">TryScan</span><span class="o">((</span><span class="n">scanner</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="nc">Msg</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="o">;&gt;</span> <span class="nc">Async</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;&lt;</span><span class="n">em</span><span class="o">&gt;&gt;</span> <span class="n">option</span><span class="o">),</span> <span class="n">timeout</span><span class="o">):</span> <span class="nc">Async</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">option</span><span class="o">&gt;</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">let</span> <span class="n">ts</span> <span class="o">=</span> <span class="nn">TimeSpan</span><span class="p">.</span><span class="nc">FromMilliseconds</span><span class="o">(</span> <span class="kt">float</span> <span class="n">timeout</span><span class="o">)</span>
</span><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">loopForMsg</span> <span class="o">=</span> <span class="n">async</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">let</span><span class="o">!</span> <span class="n">msg</span> <span class="o">=</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">AwaitTask</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;|</span> <span class="n">incomingMessages</span><span class="o">.</span><span class="nc">ReceiveAsync</span><span class="o">(</span><span class="n">ts</span><span class="o">)</span>
</span><span class='line'>                                  <span class="o">.</span><span class="nc">ContinueWith</span><span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="n">tt</span><span class="o">:</span><span class="nc">Task</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;_&amp;</span><span class="n">gt</span><span class="o">;)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>                                      <span class="k">if</span> <span class="n">tt</span><span class="o">.</span><span class="nc">IsCanceled</span> <span class="o">||</span> <span class="n">tt</span><span class="o">.</span><span class="nc">IsFaulted</span> <span class="k">then</span> <span class="nc">None</span>
</span><span class='line'>                                      <span class="k">else</span> <span class="nc">Some</span> <span class="n">tt</span><span class="o">.</span><span class="nc">Result</span><span class="o">)</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">msg</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Some</span> <span class="n">m</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>  <span class="k">let</span> <span class="n">res</span> <span class="o">=</span> <span class="n">scanner</span> <span class="n">m</span>
</span><span class='line'>                 <span class="k">match</span> <span class="n">res</span> <span class="k">with</span>
</span><span class='line'>                 <span class="o">|</span> <span class="nc">None</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="k">return</span><span class="o">!</span> <span class="n">loopForMsg</span>
</span><span class='line'>                 <span class="o">|</span> <span class="nc">Some</span> <span class="n">res</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="k">return</span><span class="o">!</span> <span class="n">res</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">None</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="k">return</span> <span class="nc">None</span><span class="o">}</span>
</span><span class='line'><span class="n">loopForMsg</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
This one also uses the same <code>ContinueWith</code> functionality in the recursive <code>loopForMsg</code> function, perhaps some
of these functions could extracted out and refactored but I prefer to keep the code like this to better explain what&rsquo;s going
on.  The the code is available on GitHub anyway so feel free to clean up any detritus and send me a pull request.  Again we use pattern matching to keep calling the <code>loopForMsg</code> function until the result is returned or a time out occurs.</p>

<h3>Scan</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">Scan</span><span class="o">(</span><span class="n">scanner</span><span class="o">,</span> <span class="n">timeout</span><span class="o">)</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">async</span> <span class="o">{</span> <span class="k">let</span><span class="o">!</span> <span class="n">res</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="nc">TryScan</span><span class="o">(</span><span class="n">scanner</span><span class="o">,</span> <span class="n">timeout</span><span class="o">)</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">res</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">None</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="k">return</span> <span class="n">raise</span><span class="o">(</span><span class="nc">TimeoutException</span><span class="o">(</span><span class="s2">&quot;Scan TimedOut&quot;</span><span class="o">))</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Some</span> <span class="n">res</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="k">return</span> <span class="n">res</span> <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Finally we have Scan, this is much like PostAndReply in that it just acts as a wrapper around <code>TryScan</code> making use of
pattern matching throwing an exception on a time out.</p>

<p>That sums up the last few pieces, completing the TDF implementation of the <code>MailboxProcessor</code>.  I think this series of posts has shown the elegance of F#&rsquo;s asynchronous workflows.  The use of recursive functions and the compositional nature of asynchronous workflows really helps when you are doing this type of programming.  It&rsquo;s also very nice on the eye, each section being clearly defined.</p>

<p>The more astute of you may have noticed something a little different.  <code>Scan</code> and <code>TryScan</code> are destructive in this implementation, the unmatched messages are purged from the internal queue.  Although I could have mirrored the same functionality of the <code>MailboxProcessor</code> by using an internal list to keep track of unmatched messages, this leads to performing checks during <code>Receive</code> and <code>Scan</code> and their derivatives to make sure that this list is used first when switching from <code>Scan</code> and <code>Receive</code> functionality.</p>

<p>I think the separation of concerns are a little fuzzy in the <code>MailboxProcessor</code>.  The <code>scan</code> function seems like an after thought, even if you don&rsquo;t use <code>Scan</code> you still pay a price for it as there are numerous checks between the internal queue and the unmatched messages list.  You can also run into issues while using <code>Scan</code> and <code>TryScan</code> that can result in out of memory conditions due to the inherent unbounded nature.  I will briefly describe and explore the conditions that can lead to that in the next post.  In the implementation presented here we can get bounded checking by passing in an optional <code>DataflowBlockOptions</code> and setting a value for the <code>BoundedCapacity</code> property.</p>

<p><strong>EDIT:</strong> The code for this series of articles is now available on GitHub: <a href="https://github.com/7sharp9/FSharpDataflow">FSharpDataflow</a></p>

<p>Until next time&hellip;</p>
]]></content>
  </entry>
  
</feed>
