<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Pipelines | Moirae]]></title>
  <link href="http://MoiraeSoftware.github.io/blog/categories/pipelines/atom.xml" rel="self"/>
  <link href="http://MoiraeSoftware.github.io/"/>
  <updated>2013-08-18T22:46:30+01:00</updated>
  <id>http://MoiraeSoftware.github.io/</id>
  <author>
    <name><![CDATA[Dave Thomas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pipeline processing 3]]></title>
    <link href="http://MoiraeSoftware.github.io/blog/2011/04/04/pipeline-processing-3/"/>
    <updated>2011-04-04T21:56:33+01:00</updated>
    <id>http://MoiraeSoftware.github.io/blog/2011/04/04/pipeline-processing-3</id>
    <content type="html"><![CDATA[<p>Ok so I have been offline for a while now, what with starting a new financial contract in London and not having any broadband access for a while.Â  I have
been working on something, honest!</p>

<p>Since the last post I have been reflecting on the pipeline design and it had a distinct object orientated feel to it that I wasnt happy with, so I have
amended the structure of the code and come up with the following which simplifies in some areas and expands in others&hellip;<!-- more --></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nc">Pipeline</span>
</span><span class='line'>  <span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Collections</span><span class="p">.</span><span class="nc">Concurrent</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">[&lt;</span><span class="nc">Interface</span><span class="o">&gt;]</span>
</span><span class='line'>  <span class="k">type</span> <span class="nc">IPipelineInput</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">abstract</span> <span class="nc">Insert</span><span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="kt">unit</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">[&lt;</span><span class="nc">Interface</span><span class="o">&gt;]</span>
</span><span class='line'>  <span class="k">type</span> <span class="nc">IPipelineConnection</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">abstract</span> <span class="nc">Attach</span><span class="o">:</span> <span class="nc">IPipelineInput</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="kt">unit</span>
</span><span class='line'><span class="k">abstract</span> <span class="nc">Detach</span><span class="o">:</span> <span class="nc">IPipelineInput</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="kt">unit</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">[&lt;</span><span class="nc">Interface</span><span class="o">&gt;]</span>
</span><span class='line'>  <span class="k">type</span> <span class="nc">IPipeline</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">a</span><span class="o">,</span><span class="k">&#39;</span><span class="n">b</span><span class="o">&gt;</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">inherit</span> <span class="nc">IPipelineConnection</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="k">&#39;</span><span class="n">b</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'><span class="k">inherit</span> <span class="nc">IPipelineInput</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">type</span> <span class="nc">PipelineStage</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">a</span><span class="o">,</span><span class="k">&#39;</span><span class="n">b</span><span class="o">&gt;(</span><span class="n">processor</span><span class="o">,</span> <span class="n">router</span><span class="o">:</span> <span class="n">seq</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="nc">IPipelineInput</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="k">&#39;</span><span class="n">b</span><span class="o">&gt;&gt;</span> <span class="o">*</span> <span class="k">&#39;</span><span class="n">b</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="o">;&gt;</span> <span class="n">seq</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="nc">IPipelineInput</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="k">&#39;</span><span class="n">b</span><span class="o">&gt;&gt;,</span> <span class="o">?</span><span class="n">overflow</span><span class="o">,</span> <span class="o">?</span><span class="n">capacity</span><span class="o">,</span> <span class="o">?</span><span class="n">blockingTime</span><span class="o">)</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">let</span> <span class="n">processor</span> <span class="o">=</span> <span class="n">processor</span>
</span><span class='line'><span class="k">let</span> <span class="n">router</span> <span class="o">=</span> <span class="n">router</span>
</span><span class='line'><span class="k">let</span> <span class="n">createBlockingCollection</span> <span class="n">x</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">x</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Some</span> <span class="n">c</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="k">new</span> <span class="nc">BlockingCollection</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;(</span><span class="n">c</span><span class="o">:</span><span class="kt">int</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">None</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="k">new</span> <span class="nc">BlockingCollection</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span><span class="bp">()</span>
</span><span class='line'><span class="k">let</span> <span class="n">buffer</span> <span class="o">=</span> <span class="n">createBlockingCollection</span> <span class="n">capacity</span>
</span><span class='line'><span class="k">let</span> <span class="n">routes</span> <span class="o">=</span> <span class="n">ref</span> <span class="nn">List</span><span class="p">.</span><span class="n">empty</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="nc">IPipelineInput</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="k">&#39;</span><span class="n">b</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'><span class="k">let</span> <span class="n">queuedOrRunning</span> <span class="o">=</span> <span class="n">ref</span> <span class="bp">false</span>
</span><span class='line'><span class="k">let</span> <span class="n">blocktime</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">match</span> <span class="n">blockingTime</span> <span class="k">with</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Some</span> <span class="n">b</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">b</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">None</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">250</span>
</span><span class='line'><span class="k">let</span> <span class="n">consumerLoop</span> <span class="o">=</span> <span class="n">async</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">try</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">rec</span> <span class="n">loop</span><span class="bp">()</span><span class="o">=</span>
</span><span class='line'>      <span class="k">let</span> <span class="n">item</span> <span class="o">=</span> <span class="n">ref</span> <span class="nn">Unchecked</span><span class="p">.</span><span class="n">defaultof</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;_&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>      <span class="k">let</span> <span class="n">taken</span> <span class="o">=</span> <span class="n">buffer</span><span class="o">.</span><span class="nc">TryTake</span><span class="o">(</span><span class="n">item</span><span class="o">,</span> <span class="n">blocktime</span><span class="o">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">taken</span> <span class="k">then</span>
</span><span class='line'>          <span class="k">do</span> <span class="o">!</span><span class="n">item</span>
</span><span class='line'>          <span class="o">|&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">processor</span>
</span><span class='line'>          <span class="o">|&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">iter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">z</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>          <span class="o">(</span><span class="k">match</span> <span class="o">!</span><span class="n">routes</span> <span class="k">with</span>
</span><span class='line'>           <span class="o">|</span> <span class="bp">[]</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="bp">()</span><span class="c">(*we cant route with no routes*)</span>
</span><span class='line'>           <span class="o">|</span> <span class="o">_</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="k">do</span> <span class="n">router</span> <span class="o">(!</span><span class="n">routes</span><span class="o">,</span> <span class="n">z</span><span class="o">)</span> <span class="o">|&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">iter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">r</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">(</span><span class="n">r</span><span class="o">.</span><span class="nc">Insert</span> <span class="n">z</span> <span class="o">)))</span> <span class="o">)</span>
</span><span class='line'>          <span class="n">loop</span><span class="bp">()</span>
</span><span class='line'>      <span class="k">else</span> <span class="bp">()</span><span class="c">(*exit nothing to consume in time limit*)</span>
</span><span class='line'>    <span class="n">loop</span><span class="bp">()</span>
</span><span class='line'>  <span class="k">with</span> <span class="n">e</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">raise</span> <span class="n">e</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="k">member</span> <span class="n">this</span><span class="o">.</span><span class="nc">ClearRoutes</span> <span class="o">=</span> <span class="n">routes</span> <span class="o">:=</span> <span class="bp">[]</span>
</span><span class='line'><span class="k">interface</span> <span class="nc">IPipelineInput</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="k">&#39;</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="k">with</span>
</span><span class='line'>  <span class="k">member</span> <span class="n">this</span><span class="o">.</span><span class="nc">Insert</span> <span class="n">payload</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">added</span> <span class="o">=</span> <span class="n">buffer</span><span class="o">.</span><span class="nc">TryAdd</span><span class="o">(</span><span class="n">payload</span><span class="o">,</span> <span class="n">blocktime</span><span class="o">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">added</span> <span class="k">then</span>
</span><span class='line'>      <span class="c1">//begin consumer loop</span>
</span><span class='line'>      <span class="k">if</span> <span class="ow">not</span> <span class="o">!</span><span class="n">queuedOrRunning</span> <span class="k">then</span>
</span><span class='line'>        <span class="n">lock</span> <span class="n">consumerLoop</span> <span class="o">(</span><span class="k">fun</span><span class="bp">()</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>        <span class="nn">Async</span><span class="p">.</span><span class="nc">Start</span><span class="o">(</span><span class="n">async</span> <span class="o">{</span><span class="k">do</span><span class="o">!</span> <span class="n">consumerLoop</span> <span class="o">})</span>
</span><span class='line'>        <span class="n">queuedOrRunning</span> <span class="o">:=</span> <span class="bp">true</span><span class="o">)</span>
</span><span class='line'>      <span class="k">else</span><span class="bp">()</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="c1">//overflow here if function passed</span>
</span><span class='line'>      <span class="k">match</span> <span class="n">overflow</span> <span class="k">with</span>
</span><span class='line'>      <span class="o">|</span> <span class="nc">Some</span> <span class="n">t</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>  <span class="n">payload</span> <span class="o">|&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">overflow</span><span class="o">.</span><span class="nc">Value</span>
</span><span class='line'>      <span class="o">|</span> <span class="nc">None</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="bp">()</span>
</span><span class='line'><span class="k">interface</span> <span class="nc">IPipelineConnection</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="k">&#39;</span><span class="n">b</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="k">with</span>
</span><span class='line'>  <span class="k">member</span> <span class="n">this</span><span class="o">.</span><span class="nc">Attach</span> <span class="o">(</span><span class="n">stage</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">current</span> <span class="o">=</span> <span class="o">!</span><span class="n">routes</span>
</span><span class='line'>    <span class="n">routes</span> <span class="o">:=</span> <span class="n">stage</span> <span class="o">::</span> <span class="n">current</span>
</span><span class='line'>  <span class="k">member</span> <span class="n">this</span><span class="o">.</span><span class="nc">Detach</span> <span class="o">(</span><span class="n">stage</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">current</span> <span class="o">=</span> <span class="o">!</span><span class="n">routes</span>
</span><span class='line'>    <span class="n">routes</span> <span class="o">:=</span> <span class="nn">List</span><span class="p">.</span><span class="n">filter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">el</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">el</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">stage</span><span class="o">)</span> <span class="n">current</span>
</span><span class='line'><span class="k">static</span> <span class="k">member</span> <span class="nc">Attach</span> <span class="o">(</span><span class="n">a</span><span class="o">:</span><span class="nc">IPipelineConnection</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;_&amp;</span><span class="n">gt</span><span class="o">;)</span> <span class="o">(</span><span class="n">b</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">a</span><span class="o">.</span><span class="nc">Attach</span> <span class="n">b</span> <span class="o">;</span><span class="n">b</span>
</span><span class='line'><span class="k">static</span> <span class="k">member</span> <span class="nc">Detach</span> <span class="o">(</span><span class="n">a</span><span class="o">:</span> <span class="nc">IPipelineConnection</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;_&amp;</span><span class="n">gt</span><span class="o">;)</span> <span class="o">(</span><span class="n">b</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">a</span><span class="o">.</span><span class="nc">Detach</span> <span class="n">b</span> <span class="o">;</span><span class="n">a</span>
</span><span class='line'><span class="k">static</span> <span class="k">member</span> <span class="o">(++&amp;</span><span class="n">gt</span><span class="o">;)</span> <span class="o">(</span><span class="n">a</span><span class="o">:</span><span class="nc">IPipelineConnection</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;_&amp;</span><span class="n">gt</span><span class="o">;,</span> <span class="n">b</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">a</span><span class="o">.</span><span class="nc">Attach</span> <span class="o">(</span><span class="n">b</span><span class="o">)</span> <span class="o">;</span><span class="n">b</span>
</span><span class='line'><span class="k">static</span> <span class="k">member</span> <span class="o">(--&amp;</span><span class="n">gt</span><span class="o">;)</span> <span class="o">(</span><span class="n">a</span><span class="o">:</span><span class="nc">IPipelineConnection</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;_&amp;</span><span class="n">gt</span><span class="o">;,</span> <span class="n">b</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">a</span><span class="o">.</span><span class="nc">Detach</span> <span class="n">b</span> <span class="o">;</span><span class="n">a</span>
</span><span class='line'><span class="k">static</span> <span class="k">member</span> <span class="o">(&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">lt</span><span class="o">;--)</span> <span class="o">(</span><span class="n">a</span><span class="o">:</span><span class="nc">IPipelineInput</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;_&amp;</span><span class="n">gt</span><span class="o">;,</span> <span class="n">b</span><span class="o">:</span><span class="k">&#39;</span><span class="n">b</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">a</span><span class="o">.</span><span class="nc">Insert</span> <span class="n">b</span>
</span><span class='line'><span class="k">static</span> <span class="k">member</span> <span class="o">(--&amp;</span><span class="n">gt</span><span class="o">;&amp;</span><span class="n">gt</span><span class="o">;)</span> <span class="o">(</span><span class="n">b</span><span class="o">,</span><span class="n">a</span><span class="o">:</span><span class="nc">IPipelineInput</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;_&amp;</span><span class="n">gt</span><span class="o">;)</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">a</span><span class="o">.</span><span class="nc">Insert</span> <span class="n">b</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Summary.</h3>

<p>I only want to summarise the code as I think its fairly straight forward to
see whats going on.</p>

<h3>Interfaces</h3>

<p>We have two main interfaces defined <strong>IPipelineInput&lt;&lsquo;a></strong> and
<strong>IPipelineConnection&lt;'a>, </strong>as you can tell by the names they are involved
with connecting the pipeline together and getting information into the
pipeline.Â  Those two interfaces are merged together in the IPipeline&lt;'a, 'b>
interface, this keeps a nice separation between connecting and inserting into
the pipeline, it also makes implementation easier and allows the interfaces to
be implemented in other areas of code that need to talk to or connect to a
pipeline.</p>

<h3>Internals</h3>

<p>Inside the pipeline we have the bounded blocking queue which is implemented by
the BlockingCollection from TPL. This is used to store the pipeline payloads
that are waiting to be processed.</p>

<p>The consumerLoop function isÂ recursiveÂ and continually tries to take items
from the blocking collection processing and routing each one to the next
pipeline stage.</p>

<p>The processor is a function that transforms from type &lsquo;a to type 'b.</p>

<p>The router is a function that takes a sequence of IPipelineInput&lt;&lsquo;b> and also
the payload 'b it returns a sequence of IPipelineInput&lt;'b>.Â  What this
effectively means is that we can route by the connected stages (i.e. round
robin routing, multi-cast routing.)Â  Â Or we could route by payload contents
(i.e. if the payload contains a certain bytes sequence we could choose a
certain IPipelineInput&lt;'b>.)</p>

<p>Each item taken is passed to the processor and router via pipeline (<strong>|></strong>)Â and
Seq operations, recursively calling itself until an item can no longer be
retrieved from the buffer.</p>

<p>The implementation of IPipelineInput&lt;&lsquo;a>.Insert is the counterpart to the
previous function. It first tries to inset the item into the bounded blocking
queue, if this cannot be done then the overflow function is called if one is
present. Next the async consumer loop is started if it is not already running.
The ideaÂ behind this isÂ thatÂ by keeping theÂ payload processing running on the
thread pool while there is work to do it will cut down on the number of
context switches between threads.Â  Once an item cannot be taken from the
bounding blocking queue the loop will exit.</p>

<p>The rest of the code is pretty standard stuff and should be pretty easy to
follow.</p>

<p>I also define some symbolic operations to simply constructing and using the
pipeline:</p>

<p><strong>++></strong> Attaches the pipeline stage on the right hand side to the one on the left. <strong>&mdash;></strong> Detaches the pipelinestage on the right from the one on the left. <strong>&lt;&lt;&mdash;</strong> Inserts a payload on the right into the pipeline stage on the left. <strong>&mdash;>></strong> Inserts a payload on the left hand side intoÂ the pipeline stage on the right.<br/>
These help to keep a nice terse description of the pipeline, once things get a little more complex other operators may be required, the now discontinued
<a href="http://msdn.microsoft.com/en-us/devlabs/dd795202.aspx">Axiom</a> had a whole host of these, its a pity Microsoft dropped the language.</p>

<h3>Example</h3>

<p>Heres a quick sample pipeline showing the pipeline in use:</p>

<ul>
<li>Stage 1 takes a string and splits it based on the &lsquo;,&rsquo;.</li>
<li>Stage 2 reverses each string.</li>
<li>Stage 3 reverses the string back to the original.</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="n">program</span>
</span><span class='line'>  <span class="k">open</span> <span class="nc">System</span>
</span><span class='line'>  <span class="k">open</span> <span class="nc">Pipeline</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">consoleLock</span> <span class="o">=</span> <span class="k">new</span> <span class="n">obj</span><span class="bp">()</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">split</span> <span class="n">del</span> <span class="n">n</span> <span class="o">(</span><span class="n">s</span><span class="o">:</span><span class="kt">string</span><span class="o">)</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">lock</span> <span class="n">consoleLock</span> <span class="o">(</span><span class="k">fun</span><span class="bp">()</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'><span class="k">do</span> <span class="n">printfn</span> <span class="s2">&quot;%A:before split %A&quot;</span> <span class="n">n</span> <span class="n">s</span>
</span><span class='line'><span class="k">let</span> <span class="n">split</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="nc">Split</span><span class="o">([|</span><span class="n">del</span><span class="o">|])</span>
</span><span class='line'><span class="k">do</span> <span class="n">printfn</span> <span class="s2">&quot;%A:after: split into: %A&quot;</span> <span class="n">n</span> <span class="n">split</span>
</span><span class='line'><span class="n">split</span> <span class="o">|&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">toSeq</span><span class="o">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">let</span> <span class="n">reverse</span> <span class="o">(</span><span class="n">s</span><span class="o">:</span><span class="kt">string</span><span class="o">)</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">new</span> <span class="kt">string</span><span class="o">(</span><span class="n">s</span> <span class="o">|&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">toArray</span> <span class="o">|&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">rev</span><span class="o">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">let</span> <span class="n">oneToSingleton</span> <span class="n">a</span> <span class="n">b</span> <span class="n">f</span><span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">lock</span> <span class="n">consoleLock</span> <span class="o">(</span><span class="k">fun</span><span class="bp">()</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>  <span class="n">printfn</span> <span class="s2">&quot;%A:before reverse %A&quot;</span> <span class="n">a</span> <span class="n">b</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">b</span> <span class="o">|&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">f</span>
</span><span class='line'>  <span class="n">printfn</span> <span class="s2">&quot;%A:after reverse %A&quot;</span> <span class="n">a</span> <span class="n">result</span>
</span><span class='line'>  <span class="n">result</span><span class="o">|&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">singleton</span><span class="o">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">let</span> <span class="nc">OneToSeqRev</span> <span class="n">a</span> <span class="n">b</span> <span class="o">=</span> <span class="n">oneToSingleton</span> <span class="n">a</span> <span class="n">b</span> <span class="n">reverse</span> <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="c1">///Simply picks the first route</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">basicRouter</span><span class="o">(</span> <span class="n">r</span><span class="o">,</span> <span class="n">i</span><span class="o">)</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">let</span> <span class="n">head</span> <span class="o">=</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">head</span> <span class="n">r</span>
</span><span class='line'><span class="nn">Seq</span><span class="p">.</span><span class="n">singleton</span> <span class="n">head</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">let</span> <span class="n">p1</span> <span class="o">=</span> <span class="nc">PipelineStage</span><span class="o">(</span> <span class="n">split</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="o">;,&amp;</span><span class="n">rsquo</span><span class="o">;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="mi">1</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="n">basicRouter</span><span class="o">)</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">p2</span> <span class="o">=</span> <span class="nc">PipelineStage</span><span class="o">(</span> <span class="nc">OneToSeqRev</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="mi">2</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="n">basicRouter</span><span class="o">)</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">p3</span> <span class="o">=</span> <span class="nc">PipelineStage</span><span class="o">(</span> <span class="nc">OneToSeqRev</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="mi">3</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="n">basicRouter</span><span class="o">)&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="n">p1</span> <span class="o">++&gt;</span> <span class="n">p2</span> <span class="o">++&gt;</span> <span class="n">p3</span> <span class="o">|&gt;</span> <span class="n">ignore</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">generateCircularSeq</span> <span class="o">(</span><span class="n">lst</span><span class="o">:&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">a</span> <span class="kt">list</span><span class="o">)</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">let</span> <span class="k">rec</span> <span class="n">next</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">seq</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">element</span> <span class="k">in</span> <span class="n">lst</span> <span class="k">do</span>
</span><span class='line'>      <span class="k">yield</span> <span class="n">element</span>
</span><span class='line'>    <span class="k">yield</span><span class="o">!</span> <span class="n">next</span><span class="bp">()</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="n">next</span><span class="bp">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">for</span> <span class="n">str</span> <span class="k">in</span> <span class="o">[&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">John</span><span class="o">,</span><span class="nc">Paul</span><span class="o">,</span><span class="nc">George</span><span class="o">,</span><span class="nc">Ringo</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;]</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="n">generateCircularSeq</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">take</span> <span class="mi">10</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">do</span>  <span class="n">str</span> <span class="o">--&amp;</span><span class="n">gt</span><span class="o">;&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">p1</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="nn">Console</span><span class="p">.</span><span class="nc">ReadKey</span><span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As you can see the assignment of the pipeline stages is pretty simple as is the composition of multiple stages. Â This was often one of the most difficult
areas while developing a similar pipelines in C# you could often find yourself with a few hundred lines of setup code which was a often a nightmare to debug
a few weeks later.</p>

<p>Hopefully I have whet your appetite with pipelines, in a future article I will be combining socket operations with pipeline stages to produce a flexible
framework to deal with high throughput network applications.</p>

<p>As always I appreciate any comments,Â until next time&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pipeline processing 2]]></title>
    <link href="http://MoiraeSoftware.github.io/blog/2011/02/13/pipeline-processing-2/"/>
    <updated>2011-02-13T12:32:38+00:00</updated>
    <id>http://MoiraeSoftware.github.io/blog/2011/02/13/pipeline-processing-2</id>
    <content type="html"><![CDATA[<h3>Welcome to pipeline processing part 2.</h3>

<p>I feel I need to backtrack slightly from the previous post, having worked with
pipelines for quite some time I have the advantage of knowing all of the
details that may be alluded to in these articles without being effected by any
omissions I may make, obviously you guys aren&rsquo;t in that position, so I&rsquo;m going
to try and rectify that a bit now. Â If you have any queries then please leave
a comment and I will try to address them in further articles. Pipelines are a
simple concept but in practice there can be some caveats and things to bear in
mind, sometime the whole mindset of development team can be against them
unless they can see the bigger picture&hellip;<!-- more --></p>

<p>First of all one of the most important things to bear in mind with a pipeline
is that you are only going to be as fast as your slowest stage, if one stage
is ten times slower than another then it will be waiting for input most of the
time, we need to make this more efficient.</p>

<h4>Premature Optimisation</h4>

<p>Lots of developers out there have the <a href="http://www.c2.com/cgi/wiki?PrematureOptimization">premature optimisation is the root of
all evil</a> mindset and will
quote this out loud to you when you mention performance early on. Â I&rsquo;m not
advocating premature optimisation, in this instance performance is key, if one
stage is out of kilter with the rest then we are going to be running at that
pace of the slowest stage, if that&rsquo;s too slow for the requirements then you
are screwed.</p>

<p>The more I think about performance the more I believe its an essential part of
creating code. There are too many developers these days that will produce
sloppy unrefined plain bad code. Â I&rsquo;m a keen believer in producing quality
code that you can be proud of, and part of that is having clean code that&rsquo;s
both efficient and works. Â I think some of this boils down to a feature driven
approach that measures developers solely in terms of features added, take the
typicalÂ <a href="http://en.wikipedia.org/wiki/Burn_down_chart">burn down chart</a> that
you would use in <a href="http://en.wikipedia.org/wiki/Agile_software_development">agile software development</a>:</p>

<p><img src="http://alistair.cockburn.us/get/1880" alt="" /></p>

<p>There is nowhere on this chart that measures whether the code is good or bad or runs to performance requirements. Â In the future I may do an article on
integrating code quality into your build process, its something I have been thinking about doing for a while now.</p>

<p>While I&rsquo;m talking about performance you also might want to check out Joe Duffy&rsquo;s post on <a href="http://www.bluebyt%0Aesoftware.com/blog/2010/09/06/ThePrematureOptimizationIsEvilMyth.aspx">The &lsquo;premature optimization is evil&rsquo; myth</a>, and also check out Joe&rsquo;s book on <a href="http://www.bluebytesoftw%0Aare.com/books/winconc/winconc_book_resources.html">concurrent programming</a>, put it on your wish list if you haven&rsquo;t already read it, its a great book.</p>

<h4>Unbalanced pipelines</h4>

<p>Data is received from the network via packets, each packet may contain one or more messages from a business systems or indeed a partial message. Â We need to
collect the packets either separate or combine them to form individual messages, deserialize them and finally log them.</p>

<p>Here&rsquo;s a sample pipeline demonstrating an unbalanced pipeline:</p>

<p><img class="<a" src="href="https://lh6.googleusercontent.com/-HDFpPk4zBzY/TwTnGvEn9kI/AAAAAAAABPE/CcRYtQ4fsEQ/pipeline.png">https://lh6.googleusercontent.com/-HDFpPk4zBzY/TwTnGvEn9kI/AAAAAAAABPE/CcRYtQ4fsEQ/pipeline.png</a>"></p>

<ol>
<li> Stage 1 of the pipeline receives these packets and processes them into individual messages passing them onto Stage 2.</li>
<li> We now have a complete message (in this instance the message will be XML) we want to turn it into a .Net type we now deserialize the message and pass it onto Stage 3.</li>
<li> To keep this pipeline simple all we are going to do here is log type of message to disk or a database, the pipeline is now complete.</li>
</ol>


<p>Stage 1 would take 5 seconds to fully utilise stage 2, stage 2 would take 2
seconds to fully utilise stage 3. Â You can see this pipeline will only process
100 transactions per second even though stages 2 has 5x the throughput of
stage 1 and stage 3 has 2x the throughput of stage 2. Â Our efficiency is only
about 10% of what it could be, we must be able to do something about that.</p>

<p>Lets look at the following diagram which demonstrate a balanced pipeline:</p>

<h4>Balanced pipelines</h4>

<p><img class="<a" src="href="https://lh4.googleusercontent.com/-8Pgq9ISPe4Q/TwTp1nwBzfI/AAAAAAAABPU/AUwLor1WI7o/balanced-pipeline.png">https://lh4.googleusercontent.com/-8Pgq9ISPe4Q/TwTp1nwBzfI/AAAAAAAABPU/AUwLor1WI7o/balanced-pipeline.png</a>"></p>

<p>You can see from this diagram that each stage processes the same number of
transactions per second by introducing parallel stages. Â This is called a
balanced pipeline. Â Sometimes you cant get a perfectly balanced pipeline but
you should strive to get as close as possible. Â Sometimes a certain stage
cannot be parallelised because it may have mutable state, or you are using
some sort of <a href="http://en.wikipedia.org/wiki/Inversion_of_control">IOC</a>
container for processing services, this might make constructing the various
stages in parallel difficult, this can become an art form in itself and can
lead to very large initialisation sections in the code. Â I hope to address all
of these issues in due course.</p>

<p>This poses some interesting thoughts and questions to add to some you may
already have:</p>

<ul>
<li>How can we easily manage the complexity of parallelism?</li>
<li>How will the distribution of work be handled?</li>
<li>How do you baseline the throughput of each stage?</li>
<li>Can you automate the parallelism of a particular stage?</li>
<li>How do you manage the complexity of multiple stages?</li>
<li>What about parallelism and mutable state?</li>
</ul>


<p>The final point to note is the Distributor/Router must operate at a much
higher rate than the processing stages otherwise you will introduce another
bottle neck into the system, although you could have a multiple distributors
but this would yet another degree of complexity that has to be managed. Â You
can see that things can quickly become more complicated than they first
seemed.</p>

<p>I know I promised lots of funky code but I figured there was a bit more
explaining to do before we can get to that. Â I want to take a more of an
iterative approach to show you the potential pitfalls that can occur during
developing such a pipeline and how to avoid them. Â I thought this would be a
lot more constructive than dropping a load of code and some pretty pictures
and hoping for the best.</p>

<p>Next time we will be exploring a simple pipeline stage with a single degree of
parallelism and a simple router. Â After that we will then start exploring and
answering the questions above, adding more features like parallelism,
instrumentation, and visualisation.</p>

<p>Hope you enjoyed this even though there was no code!</p>

<p>See you next time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pipeline processing 1]]></title>
    <link href="http://MoiraeSoftware.github.io/blog/2011/02/01/pipeline-processing-1/"/>
    <updated>2011-02-01T01:13:43+00:00</updated>
    <id>http://MoiraeSoftware.github.io/blog/2011/02/01/pipeline-processing-1</id>
    <content type="html"><![CDATA[<h3>Welcome to new series of articles on pipeline processing.</h3>

<p>First up, what&rsquo;s a pipeline? Â Well according to <a href="http://en.wikipedia.org/wiki/Pipeline_(computing">Wikipedia</a>):</p>

<pre><code>A pipeline is a set of data processing elements connected in series, so that
the output of one element is the input of the next one. The elements of a
pipeline are often executed in parallel or in time-sliced fashion; in that
case, some amount of buffer storage is often inserted between elements.  
</code></pre>

<p>In essence its a way of dealing with complexity and its also a way of breaking
down a process into separate tasks of a similar size. Â If they are used
correctly then pipelines can be used to increase the overall throughput of a
system.<!-- more --></p>

<p>In enterprise systems or in fact in most large systems, a simple idea or
program can rapidly become overwhelmingly complex. Â The management all of the
disparate parts of the system can become a nightmare and the code can quickly
becomes a labyrinth, navigating it becomes a skill of only the most
accomplished code <em>ninja, </em>and even then your playing Russian roulette with
any bug fixes.In an effort to keep things manageable and simple one approach
that we can use is a pipeline. The idea is that each stage is connected to one
or more other stages and each that each stage deals with a single task before
passing the work onto the next stage. Â There are many primitive types in the
<a href="http://msdn.microsoft.com/en-us/library/dd460717.aspx">Task Parallel Library</a>
(TPL) that you could use to compose a working pipeline, we will be using a
lightweight subset taking only a few core ideas and making sure we get a nice
slick design that is both powerful and flexible.</p>

<p>Here&rsquo;s a quick flow diagram of the sort of thing that we will be looking at:</p>

<p><img class="<a" src="href="https://lh5.googleusercontent.com/-55hM6Bez26w/TwTtHHXc-ZI/AAAAAAAABPo/LOgX1UywK0I/pipeline-tuv.png">https://lh5.googleusercontent.com/-55hM6Bez26w/TwTtHHXc-ZI/AAAAAAAABPo/LOgX1UywK0I/pipeline-tuv.png</a>"></p>

<p>This is a generic asynchronous payload based pipeline. Â Each stage is
asynchronous and self contained and is connected to one or more other stages.
As a payload enters the pipeline it is initially added to a bounding blocking
queue. Â If the queue is full then the payload is said to have overflowed and
is passed to the failure processor where the payload can be processed or
transformed in some way before being passed to a failure router which would in
turn pass the payload to one or more of the next failure stages. Â The same is
also true for a successfully queued payload except that the payload is first
dequeued, processed, then passed to a router which then passes the payload to
one or more stages. Â If an exception occurs during processing then the payload
is passed to the failure processor and processed like an overflow. Â I am
purposely missing out any details of asynchronous operation as they will be
described in more detail next time.</p>

<p>We will be using a little bit of <a href="http://tomasp.net/blog/fsharp-iv-lang.aspx">Language Oriented Programming</a>
to construct the pipeline stages, maybe using a little bit of operator overloading too. Â 
I will describe all of this in more detail next time as we dig into the code. Â 
I want this to be just a brief introduction to what we are going to be doing.</p>

<p>Here&rsquo;s a more detailed description of the components that are involved in each
stage:</p>

<h2>Bounded Blocking Queue</h2>

<p>This is a standard bounded blocking queue from the TPL, its purpose here is to
limit the amount of payloads that are waiting to be processed, each queue will
have an associated time-out period, if the time-out period passes the payload
is passed to the failure processor for processing and then finally to the the
failure router to be passed to one or more failure stages.</p>

<h2>Processors</h2>

<p>Each pipeline processor has a primary Processor&lt;T,U> and a failure processor&lt;T,V>.</p>

<p>The primary processors job is to convert type T to type U, both types can be
the same if you wish, you may well be thinking why would I want a processing
stage that essentially leaves the type unchanged? Â In this case the processor
acts as a simple a pass through but using this you to do some custom routing.
This can be very be useful in some scenarios and I will describing this in
more detail in a further post.</p>

<p>Each pipeline stage also has a failure processor&lt;T,V>. Â The failure processor
acts on the payload to produce the desired type and passes it onto the failure
router. Â The reasoning behind this scheme rather than a simplistic exception
logger is simply flexibility. Â Having spent a lot of time with this kind of
API in a more locked down format I have found that you can end up wanting a
bit more flexibility especially when some developers try to get a bit creative
with the API or start state to the payload. Â A good example of having some
flexibility is during overflow: Â If the bounded blocking queue fills up and
blocks for the time-out period then the payload could be passed to a failure
failure processor in which types T and V are the same. Â This would allow us to
pass the payload to another stage and retry later on by attaching some sort of
delayed forwarding pipeline stage.</p>

<h2>Routers</h2>

<p>The router is responsible for getting the payload to the next pipeline stage,
it can be implemented as a simple predicate function operating on the type
directly or even some outside influence if you wish. Â  An example of this
might be a simple duplicating stage where the payload is passed to multiple
output stages rather than just one, or a time based router where one stage is
passed the payload during the day and another at night. Â  When you start to
think about the possibilities the Processor / Router combination can be really
really flexible.</p>

<p>Each pipeline stage also has a corresponding has a failure router, this can be
used for all sorts of purposes like routing the failed payload to a logging
component, routing to a delayed retry mechanism, or saved to a database etc.</p>

<p>Thats all for now, we will be digging into some code and more detail next
time, and I will be describing a few different types of pipelines so you can
get a feel of how to use them and the overall structure.</p>

<p>Another interesting aspect of these pipelines is that once constructed they
can be composed into single reusable blocks that as a whole, represent a
single pipeline stage. Â These composite stages can then be connected together
to form a super pipeline stage, complexity is only visible when you start to
drill down and becomes almost fractal like&hellip;</p>

<p>As always please leave any comments or suggestions.</p>
]]></content>
  </entry>
  
</feed>
